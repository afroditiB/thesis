# -*- coding: utf-8 -*-
"""Exploratory Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1enzMkIHQinnA0abIIho8LV5UXwroZ69U

Importing the necessary libraries for retreiving data and visualizing them
"""

!pip install pymongo
import pymongo
import sys
from pymongo import MongoClient
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns

def bring_current_datetime():
  """
  Parameters: None

  Returns: dt_string : string :the current datetime 
  
  """
  from datetime import datetime

  # datetime object containing current date and time
  now = datetime.now()
 
  # YY-mm-dd H:M:S format
  dt_string = now.strftime("%Y-%m-%d %H:%M:%S")
  return dt_string

def fill_missing_dates(df,start_date,end_date):
  """
  Parameters: df : pd.Dataframe : the dataframe that we want to check for missing datetime values
            start_date : str : the date when the df's index will start
            end_date : str :the date when the df's index will end

  Returns : df_copy : the dataframe that was given as an input with start_date <= index <=  end_date
  
  For this function to work the input df has to have Datetime index

  This function takes a dataframe with a datetime index, a start and end date as an input and returns
"""
  dts=pd.date_range(start=pd.Timestamp(start_date), end=pd.Timestamp(end_date), freq="5T")
  df=df.reindex(dts)
  return df

"""Using the below credentials to collect the necessary data, for current, power and voltage of each smart meter (Wi , i=2,3,..,6), and saving them into CSVs

"""

db = MongoClient('131.154.97.22', 
                     27017, 
                     username='inergy',
                     password='inergySt0rag32oo22!').get_database('inergy_prod_db')

current_collection = db.asm_historical_smart_meters_uc6_current
power_collection = db.asm_historical_smart_meters_uc6_power
voltage_collection = db.asm_historical_smart_meters_uc6_voltage

current_df = pd.DataFrame(current_collection.find())
current_df.to_csv('current_new.csv')
print("Current Loaded")
power_df = pd.DataFrame(power_collection.find())
power_df.to_csv('power_new.csv')
print("Power Loaded")
voltage_df = pd.DataFrame(voltage_collection.find())
voltage_df.to_csv('voltage_new.csv')
print("Voltage Loaded")

"""##Clearing data from unnecessary information and converting it to an easily editable and readable format

###For every meter, we create separate dataframes for every variable ( active power, current's phase 1, voltage's phase 2,.. etc)
"""

power_w2=power_df[power_df['id']=='W2']
power_w2_active = power_w2[power_w2["power_type"]=='positive_active']
power_w2_reactive = power_w2[power_w2["power_type"]=="positive_reactive"]
power_w2_reactive = power_w2[power_w2["power_type"]=="positive_reactive"]
power_w2_apparent = power_w2[power_w2["power_type"]=="apparent"]

power_w3=power_df[power_df['id']=='W3']
power_w3_active = power_w3[power_w3["power_type"]=='positive_active']
power_w3_reactive = power_w3[power_w3["power_type"]=="positive_reactive"]
power_w3_apparent = power_w3[power_w3["power_type"]=="apparent"]

power_w4=power_df[power_df['id']=='W4']
power_w4_active = power_w4[power_w4["power_type"]=='positive_active']
power_w4_reactive = power_w4[power_w4["power_type"]=="positive_reactive"]
power_w4_apparent = power_w4[power_w4["power_type"]=="apparent"]


power_w5=power_df[power_df['id']=='W5']
power_w5_active = power_w5[power_w5["power_type"]=='positive_active']
power_w5_reactive = power_w5[power_w5["power_type"]=="positive_reactive"]
power_w5_apparent = power_w5[power_w5["power_type"]=="apparent"]

power_w6=power_df[power_df['id']=='W6']
power_w6_active = power_w6[power_w6["power_type"]=='positive_active']
power_w6_reactive = power_w6[power_w6["power_type"]=="positive_reactive"]
power_w6_apparent = power_w6[power_w6["power_type"]=="apparent"]

i_w2=current_df[current_df['id']=='W2']
i_w2_phase1 = i_w2[i_w2["phase"]=='l1']
i_w2_phase2 = i_w2[i_w2["phase"]=="l2"]
i_w2_phase3 =i_w2[i_w2["phase"]=="l3"]

i_w3=current_df[current_df['id']=='W3']
i_w3_phase1 = i_w3[i_w3["phase"]=='l1']
i_w3_phase2 = i_w3[i_w3["phase"]=="l2"]
i_w3_phase3 =i_w3[i_w3["phase"]=="l3"]

i_w4=current_df[current_df['id']=='W4']
i_w4_phase1 = i_w4[i_w4["phase"]=='l1']
i_w4_phase2 = i_w4[i_w4["phase"]=="l2"]
i_w4_phase3 =i_w4[i_w4["phase"]=="l3"]

i_w5=current_df[current_df['id']=='W5']
i_w5_phase1 = i_w5[i_w5["phase"]=='l1']
i_w5_phase2 = i_w5[i_w5["phase"]=="l2"]
i_w5_phase3 =i_w5[i_w5["phase"]=="l3"]

i_w6=current_df[current_df['id']=='W6']
i_w6_phase1 = i_w6[i_w6["phase"]=='l1']
i_w6_phase2 = i_w6[i_w6["phase"]=="l2"]
i_w6_phase3 =i_w6[i_w6["phase"]=="l3"]

#W2
v_w2=voltage_df[voltage_df['id']=='W2']
v_w2_phase1 = v_w2[v_w2["voltage_type"]=='u1']
v_w2_phase2 = v_w2[v_w2["voltage_type"]=="u2"]
v_w2_phase3 =v_w2[v_w2["voltage_type"]=="u3"]

#W3
v_w3=voltage_df[voltage_df['id']=='W3']
v_w3_phase1 = v_w3[v_w3["voltage_type"]=='u1']
v_w3_phase2 = v_w3[v_w3["voltage_type"]=="u2"]
v_w3_phase3 =v_w3[v_w3["voltage_type"]=="u3"]

#W4
v_w4=voltage_df[voltage_df['id']=='W4']
v_w4_phase1 = v_w4[v_w4["voltage_type"]=='u1']
v_w4_phase2 = v_w4[v_w4["voltage_type"]=="u2"]
v_w4_phase3 =v_w4[v_w4["voltage_type"]=="u3"]

#W5
v_w5=voltage_df[voltage_df['id']=='W5']
v_w5_phase1 = v_w5[v_w5["voltage_type"]=='u1']
v_w5_phase2 = v_w5[v_w5["voltage_type"]=="u2"]
v_w5_phase3 =v_w5[v_w5["voltage_type"]=="u3"]

#W6
v_w6=voltage_df[voltage_df['id']=='W6']
v_w6_phase1 = v_w6[v_w6["voltage_type"]=='u1']
v_w6_phase2 = v_w6[v_w6["voltage_type"]=="u2"]
v_w6_phase3 =v_w6[v_w6["voltage_type"]=="u3"]

"""####Dropping the uncnecessary columns for every meter's df (Unnamed: 0, Unnamed, 2, id, power_type) as by splitting the initial df into different dfs for each meter and for active, reactive power, we have already this information

"""

# W2
power_w2_active.drop(power_w2_active.filter(regex="Unname"),axis=1, inplace=True)
power_w2_reactive.drop(power_w2_reactive.filter(regex="Unname"),axis=1, inplace=True)
power_w2_apparent.drop(power_w2_reactive.filter(regex="Unname"),axis=1, inplace=True)

power_w2_active.drop(["id","power_type","_id"], axis=1,inplace=True)
power_w2_reactive.drop(["id","power_type","_id"], axis=1,inplace=True)
power_w2_apparent.drop(["id","power_type","_id"], axis=1,inplace=True)
# W3
power_w3_active.drop(power_w3_active.filter(regex="Unname"),axis=1, inplace=True)
power_w3_reactive.drop(power_w3_reactive.filter(regex="Unname"),axis=1, inplace=True)
power_w3_apparent.drop(power_w3_active.filter(regex="Unname"),axis=1, inplace=True)

power_w3_active.drop(["id","power_type","_id"], axis=1,inplace=True)
power_w3_reactive.drop(["id","power_type","_id"], axis=1,inplace=True)
power_w3_apparent.drop(["id","power_type","_id"], axis=1,inplace=True)

# W4
power_w4_active.drop(power_w4_active.filter(regex="Unname"),axis=1, inplace=True)
power_w4_reactive.drop(power_w4_reactive.filter(regex="Unname"),axis=1, inplace=True)
power_w4_apparent.drop(power_w4_active.filter(regex="Unname"),axis=1, inplace=True)

power_w4_active.drop(["id","power_type","_id"], axis=1,inplace=True)
power_w4_reactive.drop(["id","power_type","_id"], axis=1,inplace=True)
power_w4_apparent.drop(["id","power_type","_id"], axis=1,inplace=True)

# W5
power_w5_active.drop(power_w5_active.filter(regex="Unname"),axis=1, inplace=True)
power_w5_reactive.drop(power_w5_reactive.filter(regex="Unname"),axis=1, inplace=True)
power_w5_apparent.drop(power_w5_active.filter(regex="Unname"),axis=1, inplace=True)

power_w5_active.drop(["id","power_type","_id"], axis=1,inplace=True)
power_w5_reactive.drop(["id","power_type","_id"], axis=1,inplace=True)
power_w5_apparent.drop(["id","power_type","_id"], axis=1,inplace=True)

# W6
power_w6_active.drop(power_w6_active.filter(regex="Unname"),axis=1, inplace=True)
power_w6_reactive.drop(power_w6_reactive.filter(regex="Unname"),axis=1, inplace=True)
power_w6_apparent.drop(power_w6_active.filter(regex="Unname"),axis=1, inplace=True)

power_w6_active.drop(["id","power_type","_id"], axis=1,inplace=True)
power_w6_reactive.drop(["id","power_type","_id"], axis=1,inplace=True)
power_w6_apparent.drop(["id","power_type","_id"], axis=1,inplace=True)

#W2
i_w2.drop(i_w2.filter(regex="Unname"),axis=1, inplace=True)
i_w2_phase1.drop(i_w2_phase1.filter(regex="Unname"),axis=1, inplace=True)
i_w2_phase2.drop(i_w2_phase2.filter(regex="Unname"),axis=1, inplace=True)
i_w2_phase3.drop(i_w2_phase3.filter(regex="Unname"),axis=1, inplace=True)
i_w2.drop(["id","_id"], axis=1,inplace=True)

i_w2_phase1.drop(["id","phase","_id"], axis=1,inplace=True)
i_w2_phase2.drop(["id","phase","_id"], axis=1,inplace=True)
i_w2_phase3.drop(["id","phase","_id"], axis=1,inplace=True)

#w3
i_w3_phase1.drop(i_w3_phase1.filter(regex="Unname"),axis=1, inplace=True)
i_w3_phase2.drop(i_w3_phase2.filter(regex="Unname"),axis=1, inplace=True)
i_w3_phase3.drop(i_w3_phase3.filter(regex="Unname"),axis=1, inplace=True)

i_w3_phase1.drop(["id","phase","_id"], axis=1,inplace=True)
i_w3_phase2.drop(["id","phase","_id"], axis=1,inplace=True)
i_w3_phase3.drop(["id","phase","_id"], axis=1,inplace=True)

#w4
i_w4_phase1.drop(i_w4_phase1.filter(regex="Unname"),axis=1, inplace=True)
i_w4_phase2.drop(i_w4_phase2.filter(regex="Unname"),axis=1, inplace=True)
i_w4_phase3.drop(i_w4_phase3.filter(regex="Unname"),axis=1, inplace=True)

i_w4_phase1.drop(["id","phase","_id"], axis=1,inplace=True)
i_w4_phase2.drop(["id","phase","_id"], axis=1,inplace=True)
i_w4_phase3.drop(["id","phase","_id"], axis=1,inplace=True)

#w5
i_w5_phase1.drop(i_w5_phase1.filter(regex="Unname"),axis=1, inplace=True)
i_w5_phase2.drop(i_w5_phase2.filter(regex="Unname"),axis=1, inplace=True)
i_w5_phase3.drop(i_w5_phase3.filter(regex="Unname"),axis=1, inplace=True)

i_w5_phase1.drop(["id","phase","_id"], axis=1,inplace=True)
i_w5_phase2.drop(["id","phase","_id"], axis=1,inplace=True)
i_w5_phase3.drop(["id","phase","_id"], axis=1,inplace=True)

#w6
i_w6_phase1.drop(i_w6_phase1.filter(regex="Unname"),axis=1, inplace=True)
i_w6_phase2.drop(i_w6_phase2.filter(regex="Unname"),axis=1, inplace=True)
i_w6_phase3.drop(i_w6_phase3.filter(regex="Unname"),axis=1, inplace=True)

i_w6_phase1.drop(["id","phase","_id"], axis=1,inplace=True)
i_w6_phase2.drop(["id","phase","_id"], axis=1,inplace=True)
i_w6_phase3.drop(["id","phase","_id"], axis=1,inplace=True)

#w2
v_w2_phase1.drop(v_w2_phase1.filter(regex="Unname"),axis=1, inplace=True)
v_w2_phase2.drop(v_w2_phase2.filter(regex="Unname"),axis=1, inplace=True)
v_w2_phase3.drop(v_w2_phase3.filter(regex="Unname"),axis=1, inplace=True)

v_w2_phase1.drop(["id","voltage_type","_id"], axis=1,inplace=True)
v_w2_phase2.drop(["id","voltage_type","_id"], axis=1,inplace=True)
v_w2_phase3.drop(["id","voltage_type","_id"], axis=1,inplace=True)

#w3
v_w3_phase1.drop(v_w3_phase1.filter(regex="Unname"),axis=1, inplace=True)
v_w3_phase2.drop(v_w3_phase2.filter(regex="Unname"),axis=1, inplace=True)
v_w3_phase3.drop(v_w3_phase3.filter(regex="Unname"),axis=1, inplace=True)

v_w3_phase1.drop(["id","voltage_type","_id"], axis=1,inplace=True)
v_w3_phase2.drop(["id","voltage_type","_id"], axis=1,inplace=True)
v_w3_phase3.drop(["id","voltage_type","_id"], axis=1,inplace=True)


#w4
v_w4_phase1.drop(v_w4_phase1.filter(regex="Unname"),axis=1, inplace=True)
v_w4_phase2.drop(v_w4_phase2.filter(regex="Unname"),axis=1, inplace=True)
v_w4_phase3.drop(v_w4_phase3.filter(regex="Unname"),axis=1, inplace=True)

v_w4_phase1.drop(["id","voltage_type","_id"], axis=1,inplace=True)
v_w4_phase2.drop(["id","voltage_type","_id"], axis=1,inplace=True)
v_w4_phase3.drop(["id","voltage_type","_id"], axis=1,inplace=True)

#w5
v_w5_phase1.drop(v_w5_phase1.filter(regex="Unname"),axis=1, inplace=True)
v_w5_phase2.drop(v_w5_phase2.filter(regex="Unname"),axis=1, inplace=True)
v_w5_phase3.drop(v_w5_phase3.filter(regex="Unname"),axis=1, inplace=True)

v_w5_phase1.drop(["id","voltage_type","_id"], axis=1,inplace=True)
v_w5_phase2.drop(["id","voltage_type","_id"], axis=1,inplace=True)
v_w5_phase3.drop(["id","voltage_type","_id"], axis=1,inplace=True)


#w6
v_w6_phase1.drop(v_w6_phase1.filter(regex="Unname"),axis=1, inplace=True)
v_w6_phase2.drop(v_w6_phase2.filter(regex="Unname"),axis=1, inplace=True)
v_w6_phase3.drop(v_w6_phase3.filter(regex="Unname"),axis=1, inplace=True)

v_w6_phase1.drop(["id","voltage_type","_id"], axis=1,inplace=True)
v_w6_phase2.drop(["id","voltage_type","_id"], axis=1,inplace=True)
v_w6_phase3.drop(["id","voltage_type","_id"], axis=1,inplace=True)

"""####The rows of our dfs represent the date and the columns the time from 00 to 23:55, with 5-minutes intervals. We want to have all of our datetime data ( 5minute intervals for every day) at one column. For this we use the "stack" function. Setting "date" column as index in order to apply the .stack function. By this we stack level 1 from columns to index. With the parameter "dropna = False " we keep the Nan values.

"""

#W2
power_w2_active=power_w2_active.set_index("date")
power_w2_reactive=power_w2_reactive.set_index("date")
power_w2_apparent=power_w2_apparent.set_index("date")

power_w2_active = power_w2_active.stack(dropna=False)
power_w2_reactive = power_w2_reactive.stack(dropna=False)
power_w2_apparent = power_w2_apparent.stack(dropna=False)


#W3
power_w3_active=power_w3_active.set_index("date")
power_w3_reactive=power_w3_reactive.set_index("date")
power_w3_apparent=power_w3_apparent.set_index("date")

power_w3_active = power_w3_active.stack(dropna=False)
power_w3_reactive = power_w3_reactive.stack(dropna=False)
power_w3_apparent = power_w3_apparent.stack(dropna=False)

#W4
power_w4_active=power_w4_active.set_index("date")
power_w4_reactive=power_w4_reactive.set_index("date")
power_w4_apparent=power_w4_apparent.set_index("date")

power_w4_active = power_w4_active.stack(dropna=False)
power_w4_reactive = power_w4_reactive.stack(dropna=False)
power_w4_apparent = power_w4_apparent.stack(dropna=False)

#W5
power_w5_active=power_w5_active.set_index("date")
power_w5_reactive=power_w5_reactive.set_index("date")
power_w5_apparent=power_w5_apparent.set_index("date")

power_w5_active = power_w5_active.stack(dropna=False)
power_w5_reactive = power_w5_reactive.stack(dropna=False)
power_w5_apparent = power_w5_apparent.stack(dropna=False)


#W6
power_w6_active=power_w6_active.set_index("date")
power_w6_reactive=power_w6_reactive.set_index("date")
power_w6_apparent=power_w6_apparent.set_index("date")

power_w6_active = power_w6_active.stack(dropna=False)
power_w6_reactive = power_w6_reactive.stack(dropna=False)
power_w6_apparent = power_w6_apparent.stack(dropna=False)

#w2
i_w2_phase1 = i_w2_phase1.set_index("date")
i_w2_phase2 = i_w2_phase2.set_index("date")
i_w2_phase3 = i_w2_phase3.set_index("date")

i_w2_phase1 = i_w2_phase1.stack(dropna=False)
i_w2_phase2 = i_w2_phase2.stack(dropna=False)
i_w2_phase3 = i_w2_phase3.stack(dropna=False)

#w3
i_w3_phase1 = i_w3_phase1.set_index("date")
i_w3_phase2 = i_w3_phase2.set_index("date")
i_w3_phase3 = i_w3_phase3.set_index("date")

i_w3_phase1 = i_w3_phase1.stack(dropna=False)
i_w3_phase2 = i_w3_phase2.stack(dropna=False)
i_w3_phase3 = i_w3_phase3.stack(dropna=False)

#w4
i_w4_phase1 = i_w4_phase1.set_index("date")
i_w4_phase2 = i_w4_phase2.set_index("date")
i_w4_phase3 = i_w4_phase3.set_index("date")

i_w4_phase1 = i_w4_phase1.stack(dropna=False)
i_w4_phase2 = i_w4_phase2.stack(dropna=False)
i_w4_phase3 = i_w4_phase3.stack(dropna=False)


#w5
i_w5_phase1 = i_w5_phase1.set_index("date")
i_w5_phase2 = i_w5_phase2.set_index("date")
i_w5_phase3 = i_w5_phase3.set_index("date")

i_w5_phase1 = i_w5_phase1.stack(dropna=False)
i_w5_phase2 = i_w5_phase2.stack(dropna=False)
i_w5_phase3 = i_w5_phase3.stack(dropna=False)

#w6
i_w6_phase1 = i_w6_phase1.set_index("date")
i_w6_phase2 = i_w6_phase2.set_index("date")
i_w6_phase3 = i_w6_phase3.set_index("date")

i_w6_phase1 = i_w6_phase1.stack(dropna=False)
i_w6_phase2 = i_w6_phase2.stack(dropna=False)
i_w6_phase3 = i_w6_phase3.stack(dropna=False)


#w2
v_w2_phase1 = v_w2_phase1.set_index("date")
v_w2_phase2 = v_w2_phase2.set_index("date")
v_w2_phase3 = v_w2_phase3.set_index("date")

v_w2_phase1 = v_w2_phase1.stack(dropna=False)
v_w2_phase2 = v_w2_phase2.stack(dropna=False)
v_w2_phase3 = v_w2_phase3.stack(dropna=False)

#w3
v_w3_phase1 = v_w3_phase1.set_index("date")
v_w3_phase2 = v_w3_phase2.set_index("date")
v_w3_phase3 = v_w3_phase3.set_index("date")

v_w3_phase1 = v_w3_phase1.stack(dropna=False)
v_w3_phase2 = v_w3_phase2.stack(dropna=False)
v_w3_phase3 = v_w3_phase3.stack(dropna=False)

#w4
v_w4_phase1 = v_w4_phase1.set_index("date")
v_w4_phase2 = v_w4_phase2.set_index("date")
v_w4_phase3 = v_w4_phase3.set_index("date")

v_w4_phase1 = v_w4_phase1.stack(dropna=False)
v_w4_phase2 = v_w4_phase2.stack(dropna=False)
v_w4_phase3 = v_w4_phase3.stack(dropna=False)

#w5
v_w5_phase1 = v_w5_phase1.set_index("date")
v_w5_phase2 = v_w5_phase2.set_index("date")
v_w5_phase3 = v_w5_phase3.set_index("date")

v_w5_phase1 = v_w5_phase1.stack(dropna=False)
v_w5_phase2 = v_w5_phase2.stack(dropna=False)
v_w5_phase3 = v_w5_phase3.stack(dropna=False)

#w6
v_w6_phase1 = v_w6_phase1.set_index("date")
v_w6_phase2 = v_w6_phase2.set_index("date")
v_w6_phase3 = v_w6_phase3.set_index("date")

v_w6_phase1 = v_w6_phase1.stack(dropna=False)
v_w6_phase2 = v_w6_phase2.stack(dropna=False)
v_w6_phase3 = v_w6_phase3.stack(dropna=False)

"""####The result from the above stack function is of series type, so we convert them back to dataframes, as it is easier to work with them, and resetting the index"""

#W2
power_w2_active=power_w2_active.to_frame()
power_w2_reactive=power_w2_reactive.to_frame()
power_w2_apparent=power_w2_apparent.to_frame()

power_w2_active=power_w2_active.reset_index()
power_w2_reactive=power_w2_reactive.reset_index()
power_w2_apparent=power_w2_apparent.reset_index()

#W3
power_w3_active=power_w3_active.to_frame()
power_w3_reactive=power_w3_reactive.to_frame()
power_w3_apparent=power_w3_apparent.to_frame()

power_w3_active=power_w3_active.reset_index()
power_w3_reactive=power_w3_reactive.reset_index()
power_w3_apparent=power_w3_apparent.reset_index()

#W4
power_w4_active=power_w4_active.to_frame()
power_w4_reactive=power_w4_reactive.to_frame()
power_w4_apparent=power_w4_apparent.to_frame()
power_w4_active=power_w4_active.reset_index()
power_w4_reactive=power_w4_reactive.reset_index()
power_w4_apparent=power_w4_apparent.reset_index()

#W5
power_w5_active=power_w5_active.to_frame()
power_w5_reactive=power_w5_reactive.to_frame()
power_w5_apparent=power_w5_apparent.to_frame()
power_w5_active=power_w5_active.reset_index()
power_w5_reactive=power_w5_reactive.reset_index()
power_w5_apparent=power_w5_apparent.reset_index()

#W6
power_w6_active=power_w6_active.to_frame()
power_w6_reactive=power_w6_reactive.to_frame()
power_w6_apparent=power_w6_apparent.to_frame()
power_w6_active=power_w6_active.reset_index()
power_w6_reactive=power_w6_reactive.reset_index()
power_w6_apparent=power_w6_apparent.reset_index()

#w2
i_w2_phase1 = i_w2_phase1.to_frame()
i_w2_phase2 = i_w2_phase2.to_frame()
i_w2_phase3 = i_w2_phase3.to_frame()

i_w2_phase1 = i_w2_phase1.reset_index()
i_w2_phase2 = i_w2_phase2.reset_index()
i_w2_phase3 = i_w2_phase3.reset_index()

#w3
i_w3_phase1 = i_w3_phase1.to_frame()
i_w3_phase2 = i_w3_phase2.to_frame()
i_w3_phase3 = i_w3_phase3.to_frame()

i_w3_phase1 = i_w3_phase1.reset_index()
i_w3_phase2 = i_w3_phase2.reset_index()
i_w3_phase3 = i_w3_phase3.reset_index()

#w4
i_w4_phase1 = i_w4_phase1.to_frame()
i_w4_phase2 = i_w4_phase2.to_frame()
i_w4_phase3 = i_w4_phase3.to_frame()

i_w4_phase1 = i_w4_phase1.reset_index()
i_w4_phase2 = i_w4_phase2.reset_index()
i_w4_phase3 = i_w4_phase3.reset_index()

#w5
i_w5_phase1 = i_w5_phase1.to_frame()
i_w5_phase2 = i_w5_phase2.to_frame()
i_w5_phase3 = i_w5_phase3.to_frame()

i_w5_phase1 = i_w5_phase1.reset_index()
i_w5_phase2 = i_w5_phase2.reset_index()
i_w5_phase3 = i_w5_phase3.reset_index()

#w6
i_w6_phase1 = i_w6_phase1.to_frame()
i_w6_phase2 = i_w6_phase2.to_frame()
i_w6_phase3 = i_w6_phase3.to_frame()

i_w6_phase1 = i_w6_phase1.reset_index()
i_w6_phase2 = i_w6_phase2.reset_index()
i_w6_phase3 = i_w6_phase3.reset_index()

#w2
v_w2_phase1 = v_w2_phase1.to_frame()
v_w2_phase2 = v_w2_phase2.to_frame()
v_w2_phase3 = v_w2_phase3.to_frame()

v_w2_phase1 = v_w2_phase1.reset_index()
v_w2_phase2 = v_w2_phase2.reset_index()
v_w2_phase3 = v_w2_phase3.reset_index()

#w3
v_w3_phase1 = v_w3_phase1.to_frame()
v_w3_phase2 = v_w3_phase2.to_frame()
v_w3_phase3 = v_w3_phase3.to_frame()

v_w3_phase1 = v_w3_phase1.reset_index()
v_w3_phase2 = v_w3_phase2.reset_index()
v_w3_phase3 = v_w3_phase3.reset_index()


#w4
v_w4_phase1 = v_w4_phase1.to_frame()
v_w4_phase2 = v_w4_phase2.to_frame()
v_w4_phase3 = v_w4_phase3.to_frame()

v_w4_phase1 = v_w4_phase1.reset_index()
v_w4_phase2 = v_w4_phase2.reset_index()
v_w4_phase3 = v_w4_phase3.reset_index()

#w5
v_w5_phase1 = v_w5_phase1.to_frame()
v_w5_phase2 = v_w5_phase2.to_frame()
v_w5_phase3 = v_w5_phase3.to_frame()

v_w5_phase1 = v_w5_phase1.reset_index()
v_w5_phase2 = v_w5_phase2.reset_index()
v_w5_phase3 = v_w5_phase3.reset_index()


v_w6_phase1 = v_w6_phase1.to_frame()
v_w6_phase2 = v_w6_phase2.to_frame()
v_w6_phase3 = v_w6_phase3.to_frame()

v_w6_phase1 = v_w6_phase1.reset_index()
v_w6_phase2 = v_w6_phase2.reset_index()
v_w6_phase3 = v_w6_phase3.reset_index()

"""####Now every dataframe has three columns, one named "date" containing the date of the measurement, one named "level_1" containing the time of the measurement and one "0" with the value of the measurement. 

###We want to create one datetime column, so we combine the date and time column into one and drop then drop them, as they are no longer needed

"""

#w2
power_w2_active['datetime']=pd.to_datetime(power_w2_active['date']+ " " + power_w2_active['level_1'])
power_w2_reactive['datetime']=pd.to_datetime(power_w2_reactive['date']+ " " + power_w2_reactive['level_1'])
power_w2_apparent['datetime']=pd.to_datetime(power_w2_apparent['date']+ " " + power_w2_apparent['level_1'])

power_w2_active.drop(["date","level_1"],axis=1,inplace=True)
power_w2_reactive.drop(["date","level_1"],axis=1,inplace=True)
power_w2_apparent.drop(["date","level_1"],axis=1,inplace=True)
#w3
power_w3_active['datetime']=pd.to_datetime(power_w3_active['date']+ " " + power_w3_active['level_1'])
power_w3_reactive['datetime']=pd.to_datetime(power_w3_reactive['date']+ " " + power_w3_reactive['level_1'])
power_w3_apparent['datetime']=pd.to_datetime(power_w3_apparent['date']+ " " + power_w3_apparent['level_1'])
power_w3_active.drop(["date","level_1"],axis=1,inplace=True)
power_w3_reactive.drop(["date","level_1"],axis=1,inplace=True)
power_w3_apparent.drop(["date","level_1"],axis=1,inplace=True)

#w4
power_w4_active['datetime']=pd.to_datetime(power_w4_active['date']+ " " + power_w4_active['level_1'])
power_w4_reactive['datetime']=pd.to_datetime(power_w4_reactive['date']+ " " + power_w4_reactive['level_1'])
power_w4_apparent['datetime']=pd.to_datetime(power_w4_apparent['date']+ " " + power_w4_apparent['level_1'])
power_w4_active.drop(["date","level_1"],axis=1,inplace=True)
power_w4_reactive.drop(["date","level_1"],axis=1,inplace=True)
power_w4_apparent.drop(["date","level_1"],axis=1,inplace=True)

#w5
power_w5_active['datetime']=pd.to_datetime(power_w5_active['date']+ " " + power_w5_active['level_1'])
power_w5_reactive['datetime']=pd.to_datetime(power_w5_reactive['date']+ " " + power_w5_reactive['level_1'])
power_w5_apparent['datetime']=pd.to_datetime(power_w5_apparent['date']+ " " + power_w5_apparent['level_1'])
power_w5_active.drop(["date","level_1"],axis=1,inplace=True)
power_w5_reactive.drop(["date","level_1"],axis=1,inplace=True)
power_w5_apparent.drop(["date","level_1"],axis=1,inplace=True)

#w6
power_w6_active['datetime']=pd.to_datetime(power_w6_active['date']+ " " + power_w6_active['level_1'])
power_w6_reactive['datetime']=pd.to_datetime(power_w6_reactive['date']+ " " + power_w6_reactive['level_1'])
power_w6_apparent['datetime']=pd.to_datetime(power_w6_apparent['date']+ " " + power_w6_apparent['level_1'])
power_w6_active.drop(["date","level_1"],axis=1,inplace=True)
power_w6_reactive.drop(["date","level_1"],axis=1,inplace=True)
power_w6_apparent.drop(["date","level_1"],axis=1,inplace=True)


#w2
i_w2_phase1['datetime']=pd.to_datetime(i_w2_phase1['date']+ " " + i_w2_phase1['level_1'])
i_w2_phase2['datetime']=pd.to_datetime(i_w2_phase2['date']+ " " + i_w2_phase2['level_1'])
i_w2_phase3['datetime']=pd.to_datetime(i_w2_phase3['date']+ " " + i_w2_phase3['level_1'])

i_w2_phase2.drop(["date","level_1"],axis=1,inplace=True)
i_w2_phase3.drop(["date","level_1"],axis=1,inplace=True)
i_w2_phase1.drop(["date","level_1"],axis=1,inplace=True)


#w3
i_w3_phase1['datetime']=pd.to_datetime(i_w3_phase1['date']+ " " + i_w3_phase1['level_1'])
i_w3_phase2['datetime']=pd.to_datetime(i_w3_phase2['date']+ " " + i_w3_phase2['level_1'])
i_w3_phase3['datetime']=pd.to_datetime(i_w3_phase3['date']+ " " + i_w3_phase3['level_1'])

i_w3_phase2.drop(["date","level_1"],axis=1,inplace=True)
i_w3_phase3.drop(["date","level_1"],axis=1,inplace=True)
i_w3_phase1.drop(["date","level_1"],axis=1,inplace=True)

#w4
i_w4_phase1['datetime']=pd.to_datetime(i_w4_phase1['date']+ " " + i_w4_phase1['level_1'])
i_w4_phase2['datetime']=pd.to_datetime(i_w4_phase2['date']+ " " + i_w4_phase2['level_1'])
i_w4_phase3['datetime']=pd.to_datetime(i_w4_phase3['date']+ " " + i_w4_phase3['level_1'])

i_w4_phase2.drop(["date","level_1"],axis=1,inplace=True)
i_w4_phase3.drop(["date","level_1"],axis=1,inplace=True)
i_w4_phase1.drop(["date","level_1"],axis=1,inplace=True)

#w5
i_w5_phase1['datetime']=pd.to_datetime(i_w5_phase1['date']+ " " + i_w5_phase1['level_1'])
i_w5_phase2['datetime']=pd.to_datetime(i_w5_phase2['date']+ " " + i_w5_phase2['level_1'])
i_w5_phase3['datetime']=pd.to_datetime(i_w5_phase3['date']+ " " + i_w5_phase3['level_1'])

i_w5_phase2.drop(["date","level_1"],axis=1,inplace=True)
i_w5_phase3.drop(["date","level_1"],axis=1,inplace=True)
i_w5_phase1.drop(["date","level_1"],axis=1,inplace=True)

#w6
i_w6_phase1['datetime']=pd.to_datetime(i_w6_phase1['date']+ " " + i_w6_phase1['level_1'])
i_w6_phase2['datetime']=pd.to_datetime(i_w6_phase2['date']+ " " + i_w6_phase2['level_1'])
i_w6_phase3['datetime']=pd.to_datetime(i_w6_phase3['date']+ " " + i_w6_phase3['level_1'])

i_w6_phase2.drop(["date","level_1"],axis=1,inplace=True)
i_w6_phase3.drop(["date","level_1"],axis=1,inplace=True)
i_w6_phase1.drop(["date","level_1"],axis=1,inplace=True)


#w2
v_w2_phase1['datetime']=pd.to_datetime(v_w2_phase1['date']+ " " + v_w2_phase1['level_1'])
v_w2_phase2['datetime']=pd.to_datetime(v_w2_phase2['date']+ " " + v_w2_phase2['level_1'])
v_w2_phase3['datetime']=pd.to_datetime(v_w2_phase3['date']+ " " + v_w2_phase3['level_1'])

v_w2_phase2.drop(["date","level_1"],axis=1,inplace=True)
v_w2_phase3.drop(["date","level_1"],axis=1,inplace=True)
v_w2_phase1.drop(["date","level_1"],axis=1,inplace=True)

#w3
v_w3_phase1['datetime']=pd.to_datetime(v_w3_phase1['date']+ " " + v_w3_phase1['level_1'])
v_w3_phase2['datetime']=pd.to_datetime(v_w3_phase2['date']+ " " + v_w3_phase2['level_1'])
v_w3_phase3['datetime']=pd.to_datetime(v_w3_phase3['date']+ " " + v_w3_phase3['level_1'])

v_w3_phase2.drop(["date","level_1"],axis=1,inplace=True)
v_w3_phase3.drop(["date","level_1"],axis=1,inplace=True)
v_w3_phase1.drop(["date","level_1"],axis=1,inplace=True)
#w4
v_w4_phase1['datetime']=pd.to_datetime(v_w4_phase1['date']+ " " + v_w4_phase1['level_1'])
v_w4_phase2['datetime']=pd.to_datetime(v_w4_phase2['date']+ " " + v_w4_phase2['level_1'])
v_w4_phase3['datetime']=pd.to_datetime(v_w4_phase3['date']+ " " + v_w4_phase3['level_1'])

v_w4_phase2.drop(["date","level_1"],axis=1,inplace=True)
v_w4_phase3.drop(["date","level_1"],axis=1,inplace=True)
v_w4_phase1.drop(["date","level_1"],axis=1,inplace=True)

#w5
v_w5_phase1['datetime']=pd.to_datetime(v_w5_phase1['date']+ " " + v_w5_phase1['level_1'])
v_w5_phase2['datetime']=pd.to_datetime(v_w5_phase2['date']+ " " + v_w5_phase2['level_1'])
v_w5_phase3['datetime']=pd.to_datetime(v_w5_phase3['date']+ " " + v_w5_phase3['level_1'])

v_w5_phase2.drop(["date","level_1"],axis=1,inplace=True)
v_w5_phase3.drop(["date","level_1"],axis=1,inplace=True)
v_w5_phase1.drop(["date","level_1"],axis=1,inplace=True)

#w6
v_w6_phase1['datetime']=pd.to_datetime(v_w6_phase1['date']+ " " + v_w6_phase1['level_1'])
v_w6_phase2['datetime']=pd.to_datetime(v_w6_phase2['date']+ " " + v_w6_phase2['level_1'])
v_w6_phase3['datetime']=pd.to_datetime(v_w6_phase3['date']+ " " + v_w6_phase3['level_1'])

v_w6_phase2.drop(["date","level_1"],axis=1,inplace=True)
v_w6_phase3.drop(["date","level_1"],axis=1,inplace=True)
v_w6_phase1.drop(["date","level_1"],axis=1,inplace=True)

"""Renaming the last column "0" which contains the value of the measurement  as to describe it properly"""

#w2
power_w2_active=power_w2_active.rename(columns={0:"positive_active"})
power_w2_reactive=power_w2_reactive.rename(columns={0:"positive_reactive"})
power_w2_apparent=power_w2_apparent.rename(columns={0:"apparent"})

#w3

power_w3_active=power_w3_active.rename(columns={0:"positive_active"})
power_w3_reactive=power_w3_reactive.rename(columns={0:"positive_reactive"})
power_w3_apparent=power_w3_apparent.rename(columns={0:"apparent"})

#w4

power_w4_active=power_w4_active.rename(columns={0:"positive_active"})
power_w4_reactive=power_w4_reactive.rename(columns={0:"positive_reactive"})
power_w4_apparent=power_w4_apparent.rename(columns={0:"apparent"})

#w5

power_w5_active=power_w5_active.rename(columns={0:"positive_active"})
power_w5_reactive=power_w5_reactive.rename(columns={0:"positive_reactive"})
power_w5_apparent=power_w5_apparent.rename(columns={0:"apparent"})

#w6

power_w6_active=power_w6_active.rename(columns={0:"positive_active"})
power_w6_reactive=power_w6_reactive.rename(columns={0:"positive_reactive"})
power_w6_apparent=power_w6_apparent.rename(columns={0:"apparent"})


#w2
i_w2_phase1=i_w2_phase1.rename(columns={0:"w2_phase1"})
i_w2_phase2=i_w2_phase2.rename(columns={0:"w2_phase2"})
i_w2_phase3=i_w2_phase3.rename(columns={0:"w2_phase3"})

#w3
i_w3_phase1=i_w3_phase1.rename(columns={0:"w3_phase1"})
i_w3_phase2=i_w3_phase2.rename(columns={0:"w3_phase2"})
i_w3_phase3=i_w3_phase3.rename(columns={0:"w3_phase3"})


#w4

i_w4_phase1=i_w4_phase1.rename(columns={0:"w4_phase1"})
i_w4_phase2=i_w4_phase2.rename(columns={0:"w4_phase2"})
i_w4_phase3=i_w4_phase3.rename(columns={0:"w4_phase3"})


#w5
i_w5_phase1=i_w5_phase1.rename(columns={0:"w5_phase1"})
i_w5_phase2=i_w5_phase2.rename(columns={0:"w5_phase2"})
i_w5_phase3=i_w5_phase3.rename(columns={0:"w5_phase3"})



#w6
i_w6_phase1=i_w6_phase1.rename(columns={0:"w6_phase1"})
i_w6_phase2=i_w6_phase2.rename(columns={0:"w6_phase2"})
i_w6_phase3=i_w6_phase3.rename(columns={0:"w6_phase3"})

#w2
v_w2_phase1=v_w2_phase1.rename(columns={0:"w2_u1"})
v_w2_phase2=v_w2_phase2.rename(columns={0:"w2_u2"})
v_w2_phase3=v_w2_phase3.rename(columns={0:"w2_u3"})

#w3
v_w3_phase1=v_w3_phase1.rename(columns={0:"w3_u1"})
v_w3_phase2=v_w3_phase2.rename(columns={0:"w3_u2"})
v_w3_phase3=v_w3_phase3.rename(columns={0:"w3_u3"})

#w4

v_w4_phase1=v_w4_phase1.rename(columns={0:"w4_u1"})
v_w4_phase2=v_w4_phase2.rename(columns={0:"w4_u2"})
v_w4_phase3=v_w4_phase3.rename(columns={0:"w4_u3"})

#w5
v_w5_phase1=v_w5_phase1.rename(columns={0:"w5_u1"})
v_w5_phase2=v_w5_phase2.rename(columns={0:"w5_u2"})
v_w5_phase3=v_w5_phase3.rename(columns={0:"w5_u3"})

#w6
v_w6_phase1=v_w6_phase1.rename(columns={0:"w6_u1"})
v_w6_phase2=v_w6_phase2.rename(columns={0:"w6_u2"})
v_w6_phase3=v_w6_phase3.rename(columns={0:"w6_u3"})

"""Setting the datetime column as index

"""

#w2
power_w2_active = power_w2_active.set_index(['datetime'])
power_w2_reactive = power_w2_reactive.set_index(['datetime'])
power_w2_apparent = power_w2_apparent.set_index(['datetime'])


#w3
power_w3_active = power_w3_active.set_index(['datetime'])
power_w3_reactive = power_w3_reactive.set_index(['datetime'])
power_w3_apparent = power_w3_apparent.set_index(['datetime'])


#w4
power_w4_active = power_w4_active.set_index(['datetime'])
power_w4_reactive = power_w4_reactive.set_index(['datetime'])
power_w4_apparent = power_w4_apparent.set_index(['datetime'])


#w5
power_w5_active = power_w5_active.set_index(['datetime'])
power_w5_reactive = power_w5_reactive.set_index(['datetime'])
power_w5_apparent = power_w5_apparent.set_index(['datetime'])


#w6
power_w6_active = power_w6_active.set_index(['datetime'])
power_w6_reactive = power_w6_reactive.set_index(['datetime'])
power_w6_apparent = power_w6_apparent.set_index(['datetime'])



i_w2_phase1 = i_w2_phase1.set_index(['datetime'])
i_w2_phase2 = i_w2_phase2.set_index(['datetime'])
i_w2_phase3 = i_w2_phase3.set_index(['datetime'])

i_w3_phase1 = i_w3_phase1.set_index(['datetime'])
i_w3_phase2 = i_w3_phase2.set_index(['datetime'])
i_w3_phase3 = i_w3_phase3.set_index(['datetime'])

i_w4_phase1 = i_w4_phase1.set_index(['datetime'])
i_w4_phase2 = i_w4_phase2.set_index(['datetime'])
i_w4_phase3 = i_w4_phase3.set_index(['datetime'])

i_w5_phase1 = i_w5_phase1.set_index(['datetime'])
i_w5_phase2 = i_w5_phase2.set_index(['datetime'])
i_w5_phase3 = i_w5_phase3.set_index(['datetime'])

i_w6_phase1 = i_w6_phase1.set_index(['datetime'])
i_w6_phase2 = i_w6_phase2.set_index(['datetime'])
i_w6_phase3 = i_w6_phase3.set_index(['datetime'])



v_w2_phase1 = v_w2_phase1.set_index(['datetime'])
v_w2_phase2 = v_w2_phase2.set_index(['datetime'])
v_w2_phase3 = v_w2_phase3.set_index(['datetime'])

v_w3_phase1 = v_w3_phase1.set_index(['datetime'])
v_w3_phase2 = v_w3_phase2.set_index(['datetime'])
v_w3_phase3 = v_w3_phase3.set_index(['datetime'])

v_w4_phase1 = v_w4_phase1.set_index(['datetime'])
v_w4_phase2 = v_w4_phase2.set_index(['datetime'])
v_w4_phase3 = v_w4_phase3.set_index(['datetime'])

v_w5_phase1 = v_w5_phase1.set_index(['datetime'])
v_w5_phase2 = v_w5_phase2.set_index(['datetime'])
v_w5_phase3 = v_w5_phase3.set_index(['datetime'])

v_w6_phase1 = v_w6_phase1.set_index(['datetime'])
v_w6_phase2 = v_w6_phase2.set_index(['datetime'])
v_w6_phase3 = v_w6_phase3.set_index(['datetime'])

"""Dropping duplicate values, by keeping the last of them, as we have seen that an extra value (1) has been inserted at several entries, probably by stacking, prior to the actual value"""

power_w2_active[power_w2_active.duplicated()==True]

power_w2_active["2021-08-25 00:00:00	"]

#w2
power_w2_active = power_w2_active.loc[~power_w2_active.index.duplicated(keep='last')]
power_w2_reactive = power_w2_reactive.loc[~power_w2_reactive.index.duplicated(keep='last')]
power_w2_apparent = power_w2_apparent.loc[~power_w2_apparent.index.duplicated(keep='last')]


#w3
power_w3_active = power_w3_active.loc[~power_w3_active.index.duplicated(keep='last')]
power_w3_reactive = power_w3_reactive.loc[~power_w3_reactive.index.duplicated(keep='last')]
power_w3_apparent = power_w3_apparent.loc[~power_w3_apparent.index.duplicated(keep='last')]


#w4
power_w4_active = power_w4_active.loc[~power_w4_active.index.duplicated(keep='last')]
power_w4_reactive = power_w4_reactive.loc[~power_w4_reactive.index.duplicated(keep='last')]
power_w4_apparent = power_w4_apparent.loc[~power_w4_apparent.index.duplicated(keep='last')]


#w5
power_w5_active = power_w5_active.loc[~power_w5_active.index.duplicated(keep='last')]
power_w5_reactive = power_w5_reactive.loc[~power_w5_reactive.index.duplicated(keep='last')]
power_w5_apparent = power_w5_apparent.loc[~power_w5_apparent.index.duplicated(keep='last')]


#w6
power_w6_active = power_w6_active.loc[~power_w6_active.index.duplicated(keep='last')]
power_w6_reactive = power_w6_reactive.loc[~power_w6_reactive.index.duplicated(keep='last')]
power_w6_apparent = power_w6_apparent.loc[~power_w6_apparent.index.duplicated(keep='last')]

#w2
i_w2_phase1 = i_w2_phase1.loc[~i_w2_phase1.index.duplicated(keep='last')]
i_w2_phase2 = i_w2_phase2.loc[~i_w2_phase2.index.duplicated(keep='last')]
i_w2_phase3 = i_w2_phase3.loc[~i_w2_phase3.index.duplicated(keep='last')]

#w3
i_w3_phase1 = i_w3_phase1.loc[~i_w3_phase1.index.duplicated(keep='last')]
i_w3_phase2 = i_w3_phase2.loc[~i_w3_phase2.index.duplicated(keep='last')]
i_w3_phase3 = i_w3_phase3.loc[~i_w3_phase3.index.duplicated(keep='last')]

#w4
i_w4_phase1 = i_w4_phase1.loc[~i_w4_phase1.index.duplicated(keep='last')]
i_w4_phase2 = i_w4_phase2.loc[~i_w4_phase2.index.duplicated(keep='last')]
i_w4_phase3 = i_w4_phase3.loc[~i_w4_phase3.index.duplicated(keep='last')]

#w5
i_w5_phase1 = i_w5_phase1.loc[~i_w5_phase1.index.duplicated(keep='last')]
i_w5_phase2 = i_w5_phase2.loc[~i_w5_phase2.index.duplicated(keep='last')]
i_w5_phase3 = i_w5_phase3.loc[~i_w5_phase3.index.duplicated(keep='last')]

#w6
i_w6_phase1 = i_w6_phase1.loc[~i_w6_phase1.index.duplicated(keep='last')]
i_w6_phase2 = i_w6_phase2.loc[~i_w6_phase2.index.duplicated(keep='last')]
i_w6_phase3 = i_w6_phase3.loc[~i_w6_phase3.index.duplicated(keep='last')]

#w2
v_w2_phase1 = v_w2_phase1.loc[~v_w2_phase1.index.duplicated(keep='last')]
v_w2_phase2 = v_w2_phase2.loc[~v_w2_phase2.index.duplicated(keep='last')]
v_w2_phase3 = v_w2_phase3.loc[~v_w2_phase3.index.duplicated(keep='last')]

#w3
v_w3_phase1 = v_w3_phase1.loc[~v_w3_phase1.index.duplicated(keep='last')]
v_w3_phase2 = v_w3_phase2.loc[~v_w3_phase2.index.duplicated(keep='last')]
v_w3_phase3 = v_w3_phase3.loc[~v_w3_phase3.index.duplicated(keep='last')]

#w4
v_w4_phase1 = v_w4_phase1.loc[~v_w4_phase1.index.duplicated(keep='last')]
v_w4_phase2 = v_w4_phase2.loc[~v_w4_phase2.index.duplicated(keep='last')]
v_w4_phase3 = v_w4_phase3.loc[~v_w4_phase3.index.duplicated(keep='last')]

#w5
v_w5_phase1 = v_w5_phase1.loc[~v_w5_phase1.index.duplicated(keep='last')]
v_w5_phase2 = v_w5_phase2.loc[~v_w5_phase2.index.duplicated(keep='last')]
v_w5_phase3 = v_w5_phase3.loc[~v_w5_phase3.index.duplicated(keep='last')]

#w6
v_w6_phase1 = v_w6_phase1.loc[~v_w6_phase1.index.duplicated(keep='last')]
v_w6_phase2 = v_w6_phase2.loc[~v_w6_phase2.index.duplicated(keep='last')]
v_w6_phase3 = v_w6_phase3.loc[~v_w6_phase3.index.duplicated(keep='last')]

"""##We want the datetime index of the dfs to have the frequency attribute
###By applying fill_missing_dates function to every meter's dataframes: We basically reindex our dataframes so as it starts from the given start date ( here '2021-07-01 00:00:00') and end to the current datetime. Any missing date will be filled with NaN values.

"""

#w2
power_w2_active=fill_missing_dates(power_w2_active,'2021-07-01 00:00:00',bring_current_datetime())
power_w2_reactive=fill_missing_dates(power_w2_reactive,'2021-07-01 00:00:00',bring_current_datetime())
power_w2_apparent=fill_missing_dates(power_w2_apparent,'2021-07-01 00:00:00',bring_current_datetime())


#w3
power_w3_active=fill_missing_dates(power_w3_active,'2021-07-01 00:00:00',bring_current_datetime())
power_w3_reactive=fill_missing_dates(power_w3_reactive,'2021-07-01 00:00:00',bring_current_datetime())
power_w3_apparent=fill_missing_dates(power_w3_apparent,'2021-07-01 00:00:00',bring_current_datetime())


#w4
power_w4_active=fill_missing_dates(power_w4_active,'2021-07-01 00:00:00',bring_current_datetime())
power_w4_reactive=fill_missing_dates(power_w4_reactive,'2021-07-01 00:00:00',bring_current_datetime())
power_w4_apparent=fill_missing_dates(power_w4_apparent,'2021-07-01 00:00:00',bring_current_datetime())


#w5
power_w5_active=fill_missing_dates(power_w5_active,'2021-07-01 00:00:00',bring_current_datetime())
power_w5_reactive=fill_missing_dates(power_w5_reactive,'2021-07-01 00:00:00',bring_current_datetime())
power_w5_apparent=fill_missing_dates(power_w5_apparent,'2021-07-01 00:00:00',bring_current_datetime())

#w6
power_w6_active=fill_missing_dates(power_w6_active,'2021-07-01 00:00:00',bring_current_datetime())
power_w6_reactive=fill_missing_dates(power_w6_reactive,'2021-07-01 00:00:00',bring_current_datetime())
power_w6_apparent=fill_missing_dates(power_w6_apparent,'2021-07-01 00:00:00',bring_current_datetime())

#w2
i_w2_phase1 = fill_missing_dates(i_w2_phase1,'2021-07-01 00:00:00',bring_current_datetime())
i_w2_phase2 = fill_missing_dates(i_w2_phase2,'2021-07-01 00:00:00',bring_current_datetime())
i_w2_phase3 = fill_missing_dates(i_w2_phase3,'2021-07-01 00:00:00',bring_current_datetime())

#w3
i_w3_phase1 = fill_missing_dates(i_w3_phase1,'2021-07-01 00:00:00',bring_current_datetime())
i_w3_phase2 = fill_missing_dates(i_w3_phase2,'2021-07-01 00:00:00',bring_current_datetime())
i_w3_phase3 = fill_missing_dates(i_w3_phase3,'2021-07-01 00:00:00',bring_current_datetime())

#w4
i_w4_phase1 = fill_missing_dates(i_w4_phase1,'2021-07-01 00:00:00',bring_current_datetime())
i_w4_phase2 = fill_missing_dates(i_w4_phase2,'2021-07-01 00:00:00',bring_current_datetime())
i_w4_phase3 = fill_missing_dates(i_w4_phase3,'2021-07-01 00:00:00',bring_current_datetime())

#w5
i_w5_phase1 = fill_missing_dates(i_w5_phase1,'2021-07-01 00:00:00',bring_current_datetime())
i_w5_phase2 = fill_missing_dates(i_w5_phase2,'2021-07-01 00:00:00',bring_current_datetime())
i_w5_phase3 = fill_missing_dates(i_w5_phase3,'2021-07-01 00:00:00',bring_current_datetime())

#w6
i_w6_phase1 = fill_missing_dates(i_w6_phase1,'2021-07-01 00:00:00',bring_current_datetime())
i_w6_phase2 = fill_missing_dates(i_w6_phase2,'2021-07-01 00:00:00',bring_current_datetime())
i_w6_phase3 = fill_missing_dates(i_w6_phase3,'2021-07-01 00:00:00',bring_current_datetime())

#w2
v_w2_phase1 = fill_missing_dates(v_w2_phase1,'2021-07-01 00:00:00',bring_current_datetime())
v_w2_phase2 = fill_missing_dates(v_w2_phase2,'2021-07-01 00:00:00',bring_current_datetime())
v_w2_phase3 = fill_missing_dates(v_w2_phase3,'2021-07-01 00:00:00',bring_current_datetime())
#w3
v_w3_phase1 = fill_missing_dates(v_w3_phase1,'2021-07-01 00:00:00',bring_current_datetime())
v_w3_phase2 = fill_missing_dates(v_w3_phase2,'2021-07-01 00:00:00',bring_current_datetime())
v_w3_phase3 = fill_missing_dates(v_w3_phase3,'2021-07-01 00:00:00',bring_current_datetime())

#w4
v_w4_phase1 = fill_missing_dates(v_w4_phase1,'2021-07-01 00:00:00',bring_current_datetime())
v_w4_phase2 = fill_missing_dates(v_w4_phase2,'2021-07-01 00:00:00',bring_current_datetime())
v_w4_phase3 = fill_missing_dates(v_w4_phase3,'2021-07-01 00:00:00',bring_current_datetime())

#w5
v_w5_phase1 = fill_missing_dates(v_w5_phase1,'2021-07-01 00:00:00',bring_current_datetime())
v_w5_phase2 = fill_missing_dates(v_w5_phase2,'2021-07-01 00:00:00',bring_current_datetime())
v_w5_phase3 = fill_missing_dates(v_w5_phase3,'2021-07-01 00:00:00',bring_current_datetime())

#w6
v_w6_phase1 = fill_missing_dates(v_w6_phase1,'2021-07-01 00:00:00',bring_current_datetime())
v_w6_phase2 = fill_missing_dates(v_w6_phase2,'2021-07-01 00:00:00',bring_current_datetime())
v_w6_phase3 = fill_missing_dates(v_w6_phase3,'2021-07-01 00:00:00',bring_current_datetime())

"""###We will concatenate the different components of the same variable for every meter into one dataframe (phase 1,2 and 3 for current, and voltage and active,reactive and apparent power for power data)"""

#w2
powerw2 = pd.concat([power_w2_active, power_w2_reactive], axis=1, join="inner")
powerw2=pd.concat([powerw2,power_w2_apparent], axis=1, join="inner")
powerw2=powerw2.rename(columns={"positive_active":"active_w2","positive_reactive":"reactive_w2","apparent":"apparent_w2"})

#w3
powerw3 = pd.concat([power_w3_active, power_w3_reactive], axis=1, join="inner")
powerw3=pd.concat([powerw3,power_w3_apparent], axis=1, join="inner")

powerw3=powerw3.rename(columns={"positive_active":"active_w3","positive_reactive":"reactive_w3","apparent":"apparent_w3"})

#W4
powerw4 = pd.concat([power_w4_active, power_w4_reactive], axis=1, join="inner")
powerw4=pd.concat([powerw4,power_w4_apparent], axis=1, join="inner")
powerw4=powerw4.rename(columns={"positive_active":"active_w4","positive_reactive":"reactive_w4","apparent":"apparent_w4"})

#w5
powerw5 = pd.concat([power_w5_active, power_w5_reactive], axis=1, join="inner")
powerw5=pd.concat([powerw5,power_w5_apparent], axis=1, join="inner")
powerw5=powerw5.rename(columns={"positive_active":"active_w5","positive_reactive":"reactive_w5","apparent":"apparent_w5"})

#w6
powerw6 = pd.concat([power_w6_active, power_w6_reactive], axis=1, join="inner")
powerw6=pd.concat([powerw6,power_w6_apparent], axis=1, join="inner")
powerw6=powerw6.rename(columns={"positive_active":"active_w6","positive_reactive":"reactive_w6","apparent":"apparent_w6"})


#w2
i_w2 = pd.concat([i_w2_phase1, i_w2_phase2], axis=1, join="inner")
i_w2 = pd.concat([i_w2, i_w2_phase3], axis=1, join="inner")

#w3
i_w3 = pd.concat([i_w3_phase1, i_w3_phase2], axis=1, join="inner")
i_w3 = pd.concat([i_w3, i_w3_phase3], axis=1, join="inner")

#w4
i_w4 = pd.concat([i_w4_phase1, i_w4_phase2], axis=1, join="inner")
i_w4 = pd.concat([i_w4, i_w4_phase3], axis=1, join="inner")

#w5
i_w5 = pd.concat([i_w5_phase1, i_w5_phase2], axis=1, join="inner")
i_w5 = pd.concat([i_w5, i_w5_phase3], axis=1, join="inner")

#w6
i_w6 = pd.concat([i_w6_phase1, i_w6_phase2], axis=1, join="inner")
i_w6 = pd.concat([i_w6, i_w6_phase3], axis=1, join="inner")

#w2
v_w2 = pd.concat([v_w2_phase1, v_w2_phase2], axis=1, join="inner")
v_w2 = pd.concat([v_w2, v_w2_phase3], axis=1, join="inner")

#w3
v_w3 = pd.concat([v_w3_phase1, v_w3_phase2], axis=1, join="inner")
v_w3 = pd.concat([v_w3, v_w3_phase3], axis=1, join="inner")

#w4
v_w4 = pd.concat([v_w4_phase1, v_w4_phase2], axis=1, join="inner")
v_w4 = pd.concat([v_w4, v_w4_phase3], axis=1, join="inner")

#w5
v_w5 = pd.concat([v_w5_phase1, v_w5_phase2], axis=1, join="inner")
v_w5 = pd.concat([v_w5, v_w5_phase3], axis=1, join="inner")

#w6
v_w6 = pd.concat([v_w6_phase1, v_w6_phase2], axis=1, join="inner")
v_w6 = pd.concat([v_w6, v_w6_phase3], axis=1, join="inner")

"""Finally, as we want to have one dataframe for each variable ( power, current, voltage), containing all the measurements from the different smart meteres, we will concatenate all diferrent meters' dfs to one df.

"""

power = pd.concat([powerw2, powerw3], axis=1, join="inner")
power=pd.concat([power, powerw4], axis=1, join="inner")
power=pd.concat([power, powerw5], axis=1, join="inner")
power=pd.concat([power, powerw6], axis=1, join="inner")


voltage = pd.concat([v_w2, v_w3], axis=1, join="inner")
voltage = pd.concat([v_w4, voltage], axis=1, join="inner")
voltage = pd.concat([v_w5, voltage], axis=1, join="inner")
voltage = pd.concat([v_w6, voltage], axis=1, join="inner")

current = pd.concat([i_w2, i_w3], axis=1, join="inner")
current = pd.concat([i_w4, current], axis=1, join="inner")
current = pd.concat([i_w5, current], axis=1, join="inner")
current = pd.concat([i_w6, current], axis=1, join="inner")

"""##Giving datetime attributes to our dfs such as month, year, day in separate columns

###Lastly, by taking the information from the datetime index, we create new columns which will display the weekday, day of month, month, hour of the day and the year each measurent took place.
"""

power['day_of_month']=power.index.day 
power['month']=power.index.month
power['hour_of_day']=power.index.hour
power['year']=power.index.year
power['weekday']=power.index.day_name()


current['day_of_month']=current.index.day 
current['month']=current.index.month
current['hour_of_day']=current.index.hour
current['year']=current.index.year
current['weekday']=current.index.day_name()


voltage['day_of_month']=voltage.index.day 
voltage['month']=voltage.index.month
voltage['hour_of_day']=voltage.index.hour
voltage['year']=voltage.index.year
voltage['weekday']=voltage.index.day_name()

"""Saving the resulted dataframes with the datetime attributes to csvs

"""

power.to_csv("power_dt.csv")

voltage.to_csv("voltage_dt.csv")

current.to_csv("current_dt.csv")