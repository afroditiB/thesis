# -*- coding: utf-8 -*-
"""Exploratory Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1enzMkIHQinnA0abIIho8LV5UXwroZ69U

Importing the necessary libraries for retreiving data and visualizing them
"""

!pip install pymongo
import pymongo
import sys
from pymongo import MongoClient
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns

"""Using the below credentials to collect the necessary data, for current, power and voltage of each smart meter (Wi , i=2,3,..,6), and saving them into CSVs

"""

db = MongoClient('131.154.97.22', 
                     27017, 
                     username='inergy',
                     password='inergySt0rag32oo22!').get_database('inergy_prod_db')

current_collection = db.asm_historical_smart_meters_uc6_current
power_collection = db.asm_historical_smart_meters_uc6_power
voltage_collection = db.asm_historical_smart_meters_uc6_voltage

current_df = pd.DataFrame(current_collection.find())
current_df.to_csv('current_new.csv')
print("Current Loaded")
power_df = pd.DataFrame(power_collection.find())
power_df.to_csv('power_new.csv')
print("Power Loaded")
voltage_df = pd.DataFrame(voltage_collection.find())
voltage_df.to_csv('voltage_new.csv')
print("Voltage Loaded")

"""###First we will preprocess Power data

Splitting active, reactive power into two different dfs for every meter W2-W6 ans saving them into csvs
"""

power_w2=power_df[power_df['id']=='W2']
power_w2_active = power_w2[power_w2["power_type"]=='positive_active']
power_w2_reactive = power_w2[power_w2["power_type"]=="positive_reactive"]
power_w2_reactive = power_w2[power_w2["power_type"]=="positive_reactive"]
power_w2_apparent = power_w2[power_w2["power_type"]=="apparent"]

power_w2_active.to_csv("power_w2_active.csv")
power_w2_reactive.to_csv("power_w2_reactive.csv") 

power_w3=power_df[power_df['id']=='W3']
power_w3_active = power_w3[power_w3["power_type"]=='positive_active']
power_w3_reactive = power_w3[power_w3["power_type"]=="positive_reactive"]
power_w3_apparent = power_w3[power_w3["power_type"]=="apparent"]

power_w4=power_df[power_df['id']=='W4']
power_w4_active = power_w4[power_w4["power_type"]=='positive_active']
power_w4_reactive = power_w4[power_w4["power_type"]=="positive_reactive"]
power_w4_apparent = power_w4[power_w4["power_type"]=="apparent"]



power_w5=power_df[power_df['id']=='W5']
power_w5_active = power_w5[power_w5["power_type"]=='positive_active']
power_w5_reactive = power_w5[power_w5["power_type"]=="positive_reactive"]
power_w5_apparent = power_w5[power_w5["power_type"]=="apparent"]


power_w6=power_df[power_df['id']=='W6']
power_w6_active = power_w6[power_w6["power_type"]=='positive_active']
power_w6_reactive = power_w6[power_w6["power_type"]=="positive_reactive"]
power_w6_apparent = power_w6[power_w6["power_type"]=="apparent"]

power_active_reactive =power_df[power_df['power_type']!='apparent']
power_w2=power_active_reactive[power_active_reactive['id']=='W2']
power_w2_active = power_w2[power_w2["power_type"]=='positive_active']
power_w2_reactive = power_w2[power_w2["power_type"]=="positive_reactive"]
power_w2_active.to_csv("power_w2_active.csv")
power_w2_reactive.to_csv("power_w2_reactive.csv") 

power_w3=power_active_reactive[power_active_reactive['id']=='W3']
power_w3_active = power_w3[power_w3["power_type"]=='positive_active']
power_w3_reactive = power_w3[power_w3["power_type"]=="positive_reactive"]
power_w3_active.to_csv("power_w3_active.csv")
power_w3_reactive.to_csv("power_w3_reactive.csv")

power_w4=power_active_reactive[power_active_reactive['id']=='W4']
power_w4_active = power_w4[power_w4["power_type"]=='positive_active']
power_w4_reactive = power_w4[power_w4["power_type"]=="positive_reactive"]
power_w4_active.to_csv("power_w4_active.csv")
power_w4_reactive.to_csv("power_w4_reactive.csv")


power_w5=power_active_reactive[power_active_reactive['id']=='W5']
power_w5_active = power_w5[power_w5["power_type"]=='positive_active']
power_w5_reactive = power_w5[power_w5["power_type"]=="positive_reactive"]
power_w5_active.to_csv("power_w5_active.csv")
power_w5_reactive.to_csv("power_w5_reactive.csv")

power_w6=power_active_reactive[power_active_reactive['id']=='W6']
power_w6_active = power_w6[power_w6["power_type"]=='positive_active']
power_w6_reactive = power_w6[power_w6["power_type"]=="positive_reactive"]
power_w6_active.to_csv("power_w6_active.csv")
power_w6_reactive.to_csv("power_w6_reactive.csv")

"""Dropping the uncnecessary columns for every meter's df (Unnamed: 0, Unnamed, 2, id, power_type) as by splitting the initial df into different dfs for each meter and for active, reactive power, we have already this information. 

"""

## W2
power_w2_active.drop(power_w2_active.filter(regex="Unname"),axis=1, inplace=True)
power_w2_reactive.drop(power_w2_reactive.filter(regex="Unname"),axis=1, inplace=True)
power_w2_apparent.drop(power_w2_reactive.filter(regex="Unname"),axis=1, inplace=True)

power_w2_active.drop(["id","power_type","_id"], axis=1,inplace=True)
power_w2_reactive.drop(["id","power_type","_id"], axis=1,inplace=True)
power_w2_apparent.drop(["id","power_type","_id"], axis=1,inplace=True)

## W3
power_w3_active.drop(power_w3_active.filter(regex="Unname"),axis=1, inplace=True)
power_w3_reactive.drop(power_w3_reactive.filter(regex="Unname"),axis=1, inplace=True)
power_w3_apparent.drop(power_w3_active.filter(regex="Unname"),axis=1, inplace=True)

power_w3_active.drop(["id","power_type","_id"], axis=1,inplace=True)
power_w3_reactive.drop(["id","power_type","_id"], axis=1,inplace=True)
power_w3_apparent.drop(["id","power_type","_id"], axis=1,inplace=True)


## W4
power_w4_active.drop(power_w4_active.filter(regex="Unname"),axis=1, inplace=True)
power_w4_reactive.drop(power_w4_reactive.filter(regex="Unname"),axis=1, inplace=True)
power_w4_apparent.drop(power_w4_active.filter(regex="Unname"),axis=1, inplace=True)

power_w4_active.drop(["id","power_type","_id"], axis=1,inplace=True)
power_w4_reactive.drop(["id","power_type","_id"], axis=1,inplace=True)
power_w4_apparent.drop(["id","power_type","_id"], axis=1,inplace=True)


## W5
power_w5_active.drop(power_w5_active.filter(regex="Unname"),axis=1, inplace=True)
power_w5_reactive.drop(power_w5_reactive.filter(regex="Unname"),axis=1, inplace=True)
power_w5_apparent.drop(power_w5_active.filter(regex="Unname"),axis=1, inplace=True)

power_w5_active.drop(["id","power_type","_id"], axis=1,inplace=True)
power_w5_reactive.drop(["id","power_type","_id"], axis=1,inplace=True)
power_w5_apparent.drop(["id","power_type","_id"], axis=1,inplace=True)


## W6
power_w6_active.drop(power_w6_active.filter(regex="Unname"),axis=1, inplace=True)
power_w6_reactive.drop(power_w6_reactive.filter(regex="Unname"),axis=1, inplace=True)
power_w6_apparent.drop(power_w6_active.filter(regex="Unname"),axis=1, inplace=True)

power_w6_active.drop(["id","power_type","_id"], axis=1,inplace=True)
power_w6_reactive.drop(["id","power_type","_id"], axis=1,inplace=True)
power_w6_apparent.drop(["id","power_type","_id"], axis=1,inplace=True)

"""Setting "date" column as index in order to apply the .stack function. 
By using .stack, we stack level 1 from columns to index. With the parameter "dropna = False " we keep the Nan values. 
"""

#W2
power_w2_active=power_w2_active.set_index("date")
power_w2_reactive=power_w2_reactive.set_index("date")
power_w2_apparent=power_w2_apparent.set_index("date")

power_w2_active = power_w2_active.stack(dropna=False)
power_w2_reactive = power_w2_reactive.stack(dropna=False)
power_w2_apparent = power_w2_apparent.stack(dropna=False)


#W3
power_w3_active=power_w3_active.set_index("date")
power_w3_reactive=power_w3_reactive.set_index("date")
power_w3_apparent=power_w3_apparent.set_index("date")

power_w3_active = power_w3_active.stack(dropna=False)
power_w3_reactive = power_w3_reactive.stack(dropna=False)
power_w3_apparent = power_w3_apparent.stack(dropna=False)

#W4
power_w4_active=power_w4_active.set_index("date")
power_w4_reactive=power_w4_reactive.set_index("date")
power_w4_apparent=power_w4_apparent.set_index("date")

power_w4_active = power_w4_active.stack(dropna=False)
power_w4_reactive = power_w4_reactive.stack(dropna=False)
power_w4_apparent = power_w4_apparent.stack(dropna=False)

#W5
power_w5_active=power_w5_active.set_index("date")
power_w5_reactive=power_w5_reactive.set_index("date")
power_w5_apparent=power_w5_apparent.set_index("date")

power_w5_active = power_w5_active.stack(dropna=False)
power_w5_reactive = power_w5_reactive.stack(dropna=False)
power_w5_apparent = power_w5_apparent.stack(dropna=False)


#W6
power_w6_active=power_w6_active.set_index("date")
power_w6_reactive=power_w6_reactive.set_index("date")
power_w6_apparent=power_w6_apparent.set_index("date")

power_w6_active = power_w6_active.stack(dropna=False)
power_w6_reactive = power_w6_reactive.stack(dropna=False)
power_w6_apparent = power_w6_apparent.stack(dropna=False)

"""Convertime the resulted series type to  df again and reseting the index """

#W2
power_w2_active=power_w2_active.to_frame()
power_w2_reactive=power_w2_reactive.to_frame()
power_w2_apparent=power_w2_apparent.to_frame()

power_w2_active=power_w2_active.reset_index()
power_w2_reactive=power_w2_reactive.reset_index()
power_w2_apparent=power_w2_apparent.reset_index()

#W3
power_w3_active=power_w3_active.to_frame()
power_w3_reactive=power_w3_reactive.to_frame()
power_w3_apparent=power_w3_apparent.to_frame()

power_w3_active=power_w3_active.reset_index()
power_w3_reactive=power_w3_reactive.reset_index()
power_w3_apparent=power_w3_apparent.reset_index()

#W4
power_w4_active=power_w4_active.to_frame()
power_w4_reactive=power_w4_reactive.to_frame()
power_w4_apparent=power_w4_apparent.to_frame()
power_w4_active=power_w4_active.reset_index()
power_w4_reactive=power_w4_reactive.reset_index()
power_w4_apparent=power_w4_apparent.reset_index()

#W5
power_w5_active=power_w5_active.to_frame()
power_w5_reactive=power_w5_reactive.to_frame()
power_w5_apparent=power_w5_apparent.to_frame()
power_w5_active=power_w5_active.reset_index()
power_w5_reactive=power_w5_reactive.reset_index()
power_w5_apparent=power_w5_apparent.reset_index()

#W6
power_w6_active=power_w6_active.to_frame()
power_w6_reactive=power_w6_reactive.to_frame()
power_w6_apparent=power_w6_apparent.to_frame()
power_w6_active=power_w6_active.reset_index()
power_w6_reactive=power_w6_reactive.reset_index()
power_w6_apparent=power_w6_apparent.reset_index()

"""Combining date & time into datetime column and setting this as index."""

#w2
power_w2_active['datetime']=pd.to_datetime(power_w2_active['date']+ " " + power_w2_active['level_1'])
power_w2_reactive['datetime']=pd.to_datetime(power_w2_reactive['date']+ " " + power_w2_reactive['level_1'])
power_w2_apparent['datetime']=pd.to_datetime(power_w2_apparent['date']+ " " + power_w2_apparent['level_1'])

#w3
power_w3_active['datetime']=pd.to_datetime(power_w3_active['date']+ " " + power_w3_active['level_1'])
power_w3_reactive['datetime']=pd.to_datetime(power_w3_reactive['date']+ " " + power_w3_reactive['level_1'])
power_w3_apparent['datetime']=pd.to_datetime(power_w3_apparent['date']+ " " + power_w3_apparent['level_1'])

#w4
power_w4_active['datetime']=pd.to_datetime(power_w4_active['date']+ " " + power_w4_active['level_1'])
power_w4_reactive['datetime']=pd.to_datetime(power_w4_reactive['date']+ " " + power_w4_reactive['level_1'])
power_w4_apparent['datetime']=pd.to_datetime(power_w4_apparent['date']+ " " + power_w4_apparent['level_1'])

#w5
power_w5_active['datetime']=pd.to_datetime(power_w5_active['date']+ " " + power_w5_active['level_1'])
power_w5_reactive['datetime']=pd.to_datetime(power_w5_reactive['date']+ " " + power_w5_reactive['level_1'])
power_w5_apparent['datetime']=pd.to_datetime(power_w5_apparent['date']+ " " + power_w5_apparent['level_1'])

#w6
power_w6_active['datetime']=pd.to_datetime(power_w6_active['date']+ " " + power_w6_active['level_1'])
power_w6_reactive['datetime']=pd.to_datetime(power_w6_reactive['date']+ " " + power_w6_reactive['level_1'])
power_w6_apparent['datetime']=pd.to_datetime(power_w6_apparent['date']+ " " + power_w6_apparent['level_1'])

power_w6_apparent

#w2
power_w2_active.drop(["date","level_1"],axis=1,inplace=True)
power_w2_reactive.drop(["date","level_1"],axis=1,inplace=True)
power_w2_apparent.drop(["date","level_1"],axis=1,inplace=True)
power_w2_active=power_w2_active.rename(columns={0:"positive_active"})
power_w2_reactive=power_w2_reactive.rename(columns={0:"positive_reactive"})
power_w2_apparent=power_w2_apparent.rename(columns={0:"apparent"})


#w3
power_w3_active.drop(["date","level_1"],axis=1,inplace=True)
power_w3_reactive.drop(["date","level_1"],axis=1,inplace=True)
power_w3_apparent.drop(["date","level_1"],axis=1,inplace=True)
power_w3_active=power_w3_active.rename(columns={0:"positive_active"})
power_w3_reactive=power_w3_reactive.rename(columns={0:"positive_reactive"})
power_w3_apparent=power_w3_apparent.rename(columns={0:"apparent"})


#w4
power_w4_active.drop(["date","level_1"],axis=1,inplace=True)
power_w4_reactive.drop(["date","level_1"],axis=1,inplace=True)
power_w4_apparent.drop(["date","level_1"],axis=1,inplace=True)

power_w4_active=power_w4_active.rename(columns={0:"positive_active"})
power_w4_reactive=power_w4_reactive.rename(columns={0:"positive_reactive"})
power_w4_apparent=power_w4_apparent.rename(columns={0:"apparent"})

#w5
power_w5_active.drop(["date","level_1"],axis=1,inplace=True)
power_w5_reactive.drop(["date","level_1"],axis=1,inplace=True)
power_w5_apparent.drop(["date","level_1"],axis=1,inplace=True)

power_w5_active=power_w5_active.rename(columns={0:"positive_active"})
power_w5_reactive=power_w5_reactive.rename(columns={0:"positive_reactive"})
power_w5_apparent=power_w5_apparent.rename(columns={0:"apparent"})


#w6
power_w6_active.drop(["date","level_1"],axis=1,inplace=True)
power_w6_reactive.drop(["date","level_1"],axis=1,inplace=True)
power_w6_apparent.drop(["date","level_1"],axis=1,inplace=True)

power_w6_active=power_w6_active.rename(columns={0:"positive_active"})
power_w6_reactive=power_w6_reactive.rename(columns={0:"positive_reactive"})
power_w6_apparent=power_w6_apparent.rename(columns={0:"apparent"})

"""Setting Datetime columns as index"""

#w2
power_w2_active = power_w2_active.set_index(['datetime'])
power_w2_reactive = power_w2_reactive.set_index(['datetime'])
power_w2_apparent = power_w2_apparent.set_index(['datetime'])


#w3
power_w3_active = power_w3_active.set_index(['datetime'])
power_w3_reactive = power_w3_reactive.set_index(['datetime'])
power_w3_apparent = power_w3_apparent.set_index(['datetime'])


#w4
power_w4_active = power_w4_active.set_index(['datetime'])
power_w4_reactive = power_w4_reactive.set_index(['datetime'])
power_w4_apparent = power_w4_apparent.set_index(['datetime'])


#w5
power_w5_active = power_w5_active.set_index(['datetime'])
power_w5_reactive = power_w5_reactive.set_index(['datetime'])
power_w5_apparent = power_w5_apparent.set_index(['datetime'])


#w6
power_w6_active = power_w6_active.set_index(['datetime'])
power_w6_reactive = power_w6_reactive.set_index(['datetime'])
power_w6_apparent = power_w6_apparent.set_index(['datetime'])

"""Dropping duplicate values, by keeping the last of them, as we have seen that an extra value (1) has been inserted at sereral entries, probably by stacking, prior to the actual
 value
"""

power_w2_active[power_w2_active.duplicated()==True]

power_w2_active["2021-08-25 00:00:00	"]

#w2
power_w2_active = power_w2_active.loc[~power_w2_active.index.duplicated(keep='last')]
power_w2_reactive = power_w2_reactive.loc[~power_w2_reactive.index.duplicated(keep='last')]
power_w2_apparent = power_w2_apparent.loc[~power_w2_apparent.index.duplicated(keep='last')]


#w3
power_w3_active = power_w3_active.loc[~power_w3_active.index.duplicated(keep='last')]
power_w3_reactive = power_w3_reactive.loc[~power_w3_reactive.index.duplicated(keep='last')]
power_w3_apparent = power_w3_apparent.loc[~power_w3_apparent.index.duplicated(keep='last')]


#w4
power_w4_active = power_w4_active.loc[~power_w4_active.index.duplicated(keep='last')]
power_w4_reactive = power_w4_reactive.loc[~power_w4_reactive.index.duplicated(keep='last')]
power_w4_apparent = power_w4_apparent.loc[~power_w4_apparent.index.duplicated(keep='last')]


#w5
power_w5_active = power_w5_active.loc[~power_w5_active.index.duplicated(keep='last')]
power_w5_reactive = power_w5_reactive.loc[~power_w5_reactive.index.duplicated(keep='last')]
power_w5_apparent = power_w5_apparent.loc[~power_w5_apparent.index.duplicated(keep='last')]


#w6
power_w6_active = power_w6_active.loc[~power_w6_active.index.duplicated(keep='last')]
power_w6_reactive = power_w6_reactive.loc[~power_w6_reactive.index.duplicated(keep='last')]
power_w6_apparent = power_w6_apparent.loc[~power_w6_apparent.index.duplicated(keep='last')]

"""We create a function that takes a datetime indexed dataframe as input and returns a list with all the 5 minute interval dates from the start to the end of the dataframe's data and apply it to our power dataframe
.

def fill_missing_dates(df):
  
  Parameters: df : pd.Dataframe : the dataframe that we want to check for missing datetime values

  Returns : ls : a list that contains all the 5 minute intervals from the start to the end of our dataframe's dates
  For this function to work the input df has to have Datetime index

  dts=pd.date_range(start=pd.Timestamp(df.index[0]), end=pd.Timestamp(df.index[-1]), freq="5T")
  df=df.reindex(dts)
  return df

We create a function that returns the current datatime
"""

def bring_current_datetime():
  """
  Parameters: None

  Returns: dt_string : string :the current datetime 
  """
  from datetime import datetime

  # datetime object containing current date and time
  now = datetime.now()
 
  # YY-mm-dd H:M:S format
  dt_string = now.strftime("%Y-%m-%d %H:%M:%S")
  return dt_string

"""We create a *fill_missing_dates* function that compares our df's index to a range from 01/07/2021 00:00:00 to the current datetime, and adds the missing datetimes to df's index while it fills these values with NaNs.

"""

def fill_missing_dates(df):
  """
  Parameters: df : pd.Dataframe : the dataframe that we want to check for missing datetime values

  Returns : ls : a list that contains all the 5 minute intervals from the start to the end of our dataframe's dates
  For this function to work the input df has to have Datetime index
"""
  dts=pd.date_range(start=pd.Timestamp('2021-07-01 00:00:00'), end=pd.Timestamp(bring_current_datetime()), freq="5T")
  df=df.reindex(dts)
  return df

"""By applying fill_missing_dates function to every meter's dataframes we basically reindex our dataframes with the list created by the fill_missing_dates function. Any missing date will be filled with NaN values."""

#w2
power_w2_active=fill_missing_dates(power_w2_active)
power_w2_reactive=fill_missing_dates(power_w2_reactive)
power_w2_apparent=fill_missing_dates(power_w2_apparent)


#w3
power_w3_active=fill_missing_dates(power_w3_active)
power_w3_reactive=fill_missing_dates(power_w3_reactive)
power_w3_apparent=fill_missing_dates(power_w3_apparent)


#w4
power_w4_active=fill_missing_dates(power_w4_active)
power_w4_reactive=fill_missing_dates(power_w4_reactive)
power_w4_apparent=fill_missing_dates(power_w4_apparent)


#w5
power_w5_active=fill_missing_dates(power_w5_active)
power_w5_reactive=fill_missing_dates(power_w5_reactive)
power_w5_apparent=fill_missing_dates(power_w5_apparent)

#w6
power_w6_active=fill_missing_dates(power_w6_active)
power_w6_reactive=fill_missing_dates(power_w6_reactive)
power_w6_apparent=fill_missing_dates(power_w6_apparent)

power_w5_active.isna().sum().sum()

"""Concatenating reactive and active power for every smart meter into one power_meter df.:"""

#w2
powerw2 = pd.concat([power_w2_active, power_w2_reactive], axis=1, join="inner")
powerw2=pd.concat([powerw2,power_w2_apparent], axis=1, join="inner")
powerw2=powerw2.rename(columns={"positive_active":"active_w2","positive_reactive":"reactive_w2","apparent":"apparent_w2"})

#w3
powerw3 = pd.concat([power_w3_active, power_w3_reactive], axis=1, join="inner")
powerw3=pd.concat([powerw3,power_w3_apparent], axis=1, join="inner")

powerw3=powerw3.rename(columns={"positive_active":"active_w3","positive_reactive":"reactive_w3","apparent":"apparent_w3"})

#W4
powerw4 = pd.concat([power_w4_active, power_w4_reactive], axis=1, join="inner")
powerw4=pd.concat([powerw4,power_w4_apparent], axis=1, join="inner")
powerw4=powerw4.rename(columns={"positive_active":"active_w4","positive_reactive":"reactive_w4","apparent":"apparent_w4"})

#w5
powerw5 = pd.concat([power_w5_active, power_w5_reactive], axis=1, join="inner")
powerw5=pd.concat([powerw5,power_w5_apparent], axis=1, join="inner")
powerw5=powerw5.rename(columns={"positive_active":"active_w5","positive_reactive":"reactive_w5","apparent":"apparent_w5"})

#w6
powerw6 = pd.concat([power_w6_active, power_w6_reactive], axis=1, join="inner")
powerw6=pd.concat([powerw6,power_w6_apparent], axis=1, join="inner")
powerw6=powerw6.rename(columns={"positive_active":"active_w6","positive_reactive":"reactive_w6","apparent":"apparent_w6"})

"""Concatening all diferrent meter's power dfs to one **power** df, which will display reactive and active power for every smart meter and saving it into one csv file, named "power_total"


"""

power = pd.concat([powerw2, powerw3], axis=1, join="inner")
power=pd.concat([power, powerw4], axis=1, join="inner")
power=pd.concat([power, powerw5], axis=1, join="inner")
power=pd.concat([power, powerw6], axis=1, join="inner")

power.to_csv("power_total.csv")

"""###We will now repeat for Current data

Splitting each phase of current (1,2,3) into different dfs for every meter W2-W6
"""

i_w2=current_df[current_df['id']=='W2']
i_w2_phase1 = i_w2[i_w2["phase"]=='l1']
i_w2_phase2 = i_w2[i_w2["phase"]=="l2"]
i_w2_phase3 =i_w2[i_w2["phase"]=="l3"]

i_w3=current_df[current_df['id']=='W3']
i_w3_phase1 = i_w3[i_w3["phase"]=='l1']
i_w3_phase2 = i_w3[i_w3["phase"]=="l2"]
i_w3_phase3 =i_w3[i_w3["phase"]=="l3"]

i_w4=current_df[current_df['id']=='W4']
i_w4_phase1 = i_w4[i_w4["phase"]=='l1']
i_w4_phase2 = i_w4[i_w4["phase"]=="l2"]
i_w4_phase3 =i_w4[i_w4["phase"]=="l3"]

i_w5=current_df[current_df['id']=='W5']
i_w5_phase1 = i_w5[i_w5["phase"]=='l1']
i_w5_phase2 = i_w5[i_w5["phase"]=="l2"]
i_w5_phase3 =i_w5[i_w5["phase"]=="l3"]

i_w6=current_df[current_df['id']=='W6']
i_w6_phase1 = i_w6[i_w6["phase"]=='l1']
i_w6_phase2 = i_w6[i_w6["phase"]=="l2"]
i_w6_phase3 =i_w6[i_w6["phase"]=="l3"]

"""Dropping the uncnecessary columns for every meter's df (Unnamed: 0, Unnamed, 2, id, phase) as by splitting the initial current df into different dfs for each meter and phase 1, phase 2, phase 3, we have already this information. 

"""

#w2
i_w2.drop(i_w2.filter(regex="Unname"),axis=1, inplace=True)
i_w2_phase1.drop(i_w2_phase1.filter(regex="Unname"),axis=1, inplace=True)
i_w2_phase2.drop(i_w2_phase2.filter(regex="Unname"),axis=1, inplace=True)
i_w2_phase3.drop(i_w2_phase3.filter(regex="Unname"),axis=1, inplace=True)
i_w2.drop(["id","_id"], axis=1,inplace=True)

i_w2_phase1.drop(["id","phase","_id"], axis=1,inplace=True)
i_w2_phase2.drop(["id","phase","_id"], axis=1,inplace=True)
i_w2_phase3.drop(["id","phase","_id"], axis=1,inplace=True)

#w3
i_w3_phase1.drop(i_w3_phase1.filter(regex="Unname"),axis=1, inplace=True)
i_w3_phase2.drop(i_w3_phase2.filter(regex="Unname"),axis=1, inplace=True)
i_w3_phase3.drop(i_w3_phase3.filter(regex="Unname"),axis=1, inplace=True)

i_w3_phase1.drop(["id","phase","_id"], axis=1,inplace=True)
i_w3_phase2.drop(["id","phase","_id"], axis=1,inplace=True)
i_w3_phase3.drop(["id","phase","_id"], axis=1,inplace=True)

#w4
i_w4_phase1.drop(i_w4_phase1.filter(regex="Unname"),axis=1, inplace=True)
i_w4_phase2.drop(i_w4_phase2.filter(regex="Unname"),axis=1, inplace=True)
i_w4_phase3.drop(i_w4_phase3.filter(regex="Unname"),axis=1, inplace=True)

i_w4_phase1.drop(["id","phase","_id"], axis=1,inplace=True)
i_w4_phase2.drop(["id","phase","_id"], axis=1,inplace=True)
i_w4_phase3.drop(["id","phase","_id"], axis=1,inplace=True)

#w5
i_w5_phase1.drop(i_w5_phase1.filter(regex="Unname"),axis=1, inplace=True)
i_w5_phase2.drop(i_w5_phase2.filter(regex="Unname"),axis=1, inplace=True)
i_w5_phase3.drop(i_w5_phase3.filter(regex="Unname"),axis=1, inplace=True)

i_w5_phase1.drop(["id","phase","_id"], axis=1,inplace=True)
i_w5_phase2.drop(["id","phase","_id"], axis=1,inplace=True)
i_w5_phase3.drop(["id","phase","_id"], axis=1,inplace=True)

#w6
i_w6_phase1.drop(i_w6_phase1.filter(regex="Unname"),axis=1, inplace=True)
i_w6_phase2.drop(i_w6_phase2.filter(regex="Unname"),axis=1, inplace=True)
i_w6_phase3.drop(i_w6_phase3.filter(regex="Unname"),axis=1, inplace=True)

i_w6_phase1.drop(["id","phase","_id"], axis=1,inplace=True)
i_w6_phase2.drop(["id","phase","_id"], axis=1,inplace=True)
i_w6_phase3.drop(["id","phase","_id"], axis=1,inplace=True)

"""Setting "date" column as index in order to apply the .stack function. By using .stack, we stack level 1 from columns to index. With the parameter "dropna = False " we keep the Nan values."""

#w2
i_w2_phase1 = i_w2_phase1.set_index("date")
i_w2_phase2 = i_w2_phase2.set_index("date")
i_w2_phase3 = i_w2_phase3.set_index("date")

i_w2_phase1 = i_w2_phase1.stack(dropna=False)
i_w2_phase2 = i_w2_phase2.stack(dropna=False)
i_w2_phase3 = i_w2_phase3.stack(dropna=False)

#w3
i_w3_phase1 = i_w3_phase1.set_index("date")
i_w3_phase2 = i_w3_phase2.set_index("date")
i_w3_phase3 = i_w3_phase3.set_index("date")

i_w3_phase1 = i_w3_phase1.stack(dropna=False)
i_w3_phase2 = i_w3_phase2.stack(dropna=False)
i_w3_phase3 = i_w3_phase3.stack(dropna=False)

#w4
i_w4_phase1 = i_w4_phase1.set_index("date")
i_w4_phase2 = i_w4_phase2.set_index("date")
i_w4_phase3 = i_w4_phase3.set_index("date")

i_w4_phase1 = i_w4_phase1.stack(dropna=False)
i_w4_phase2 = i_w4_phase2.stack(dropna=False)
i_w4_phase3 = i_w4_phase3.stack(dropna=False)


#w5
i_w5_phase1 = i_w5_phase1.set_index("date")
i_w5_phase2 = i_w5_phase2.set_index("date")
i_w5_phase3 = i_w5_phase3.set_index("date")

i_w5_phase1 = i_w5_phase1.stack(dropna=False)
i_w5_phase2 = i_w5_phase2.stack(dropna=False)
i_w5_phase3 = i_w5_phase3.stack(dropna=False)

#w6
i_w6_phase1 = i_w6_phase1.set_index("date")
i_w6_phase2 = i_w6_phase2.set_index("date")
i_w6_phase3 = i_w6_phase3.set_index("date")

i_w6_phase1 = i_w6_phase1.stack(dropna=False)
i_w6_phase2 = i_w6_phase2.stack(dropna=False)
i_w6_phase3 = i_w6_phase3.stack(dropna=False)

"""Converting the resulted series type to  df again and reseting the index 

"""

#w2
i_w2_phase1 = i_w2_phase1.to_frame()
i_w2_phase2 = i_w2_phase2.to_frame()
i_w2_phase3 = i_w2_phase3.to_frame()

i_w2_phase1 = i_w2_phase1.reset_index()
i_w2_phase2 = i_w2_phase2.reset_index()
i_w2_phase3 = i_w2_phase3.reset_index()

#w3
i_w3_phase1 = i_w3_phase1.to_frame()
i_w3_phase2 = i_w3_phase2.to_frame()
i_w3_phase3 = i_w3_phase3.to_frame()

i_w3_phase1 = i_w3_phase1.reset_index()
i_w3_phase2 = i_w3_phase2.reset_index()
i_w3_phase3 = i_w3_phase3.reset_index()

#w4
i_w4_phase1 = i_w4_phase1.to_frame()
i_w4_phase2 = i_w4_phase2.to_frame()
i_w4_phase3 = i_w4_phase3.to_frame()

i_w4_phase1 = i_w4_phase1.reset_index()
i_w4_phase2 = i_w4_phase2.reset_index()
i_w4_phase3 = i_w4_phase3.reset_index()

#w5
i_w5_phase1 = i_w5_phase1.to_frame()
i_w5_phase2 = i_w5_phase2.to_frame()
i_w5_phase3 = i_w5_phase3.to_frame()

i_w5_phase1 = i_w5_phase1.reset_index()
i_w5_phase2 = i_w5_phase2.reset_index()
i_w5_phase3 = i_w5_phase3.reset_index()

#w6
i_w6_phase1 = i_w6_phase1.to_frame()
i_w6_phase2 = i_w6_phase2.to_frame()
i_w6_phase3 = i_w6_phase3.to_frame()

i_w6_phase1 = i_w6_phase1.reset_index()
i_w6_phase2 = i_w6_phase2.reset_index()
i_w6_phase3 = i_w6_phase3.reset_index()

"""Combining date & time into datetime column and setting this as index.

"""

#w2
i_w2_phase1['datetime']=pd.to_datetime(i_w2_phase1['date']+ " " + i_w2_phase1['level_1'])
i_w2_phase2['datetime']=pd.to_datetime(i_w2_phase2['date']+ " " + i_w2_phase2['level_1'])
i_w2_phase3['datetime']=pd.to_datetime(i_w2_phase3['date']+ " " + i_w2_phase3['level_1'])

i_w2_phase2.drop(["date","level_1"],axis=1,inplace=True)
i_w2_phase3.drop(["date","level_1"],axis=1,inplace=True)
i_w2_phase1.drop(["date","level_1"],axis=1,inplace=True)


#w3
i_w3_phase1['datetime']=pd.to_datetime(i_w3_phase1['date']+ " " + i_w3_phase1['level_1'])
i_w3_phase2['datetime']=pd.to_datetime(i_w3_phase2['date']+ " " + i_w3_phase2['level_1'])
i_w3_phase3['datetime']=pd.to_datetime(i_w3_phase3['date']+ " " + i_w3_phase3['level_1'])

i_w3_phase2.drop(["date","level_1"],axis=1,inplace=True)
i_w3_phase3.drop(["date","level_1"],axis=1,inplace=True)
i_w3_phase1.drop(["date","level_1"],axis=1,inplace=True)

#w4
i_w4_phase1['datetime']=pd.to_datetime(i_w4_phase1['date']+ " " + i_w4_phase1['level_1'])
i_w4_phase2['datetime']=pd.to_datetime(i_w4_phase2['date']+ " " + i_w4_phase2['level_1'])
i_w4_phase3['datetime']=pd.to_datetime(i_w4_phase3['date']+ " " + i_w4_phase3['level_1'])

i_w4_phase2.drop(["date","level_1"],axis=1,inplace=True)
i_w4_phase3.drop(["date","level_1"],axis=1,inplace=True)
i_w4_phase1.drop(["date","level_1"],axis=1,inplace=True)

#w5
i_w5_phase1['datetime']=pd.to_datetime(i_w5_phase1['date']+ " " + i_w5_phase1['level_1'])
i_w5_phase2['datetime']=pd.to_datetime(i_w5_phase2['date']+ " " + i_w5_phase2['level_1'])
i_w5_phase3['datetime']=pd.to_datetime(i_w5_phase3['date']+ " " + i_w5_phase3['level_1'])

i_w5_phase2.drop(["date","level_1"],axis=1,inplace=True)
i_w5_phase3.drop(["date","level_1"],axis=1,inplace=True)
i_w5_phase1.drop(["date","level_1"],axis=1,inplace=True)

#w6
i_w6_phase1['datetime']=pd.to_datetime(i_w6_phase1['date']+ " " + i_w6_phase1['level_1'])
i_w6_phase2['datetime']=pd.to_datetime(i_w6_phase2['date']+ " " + i_w6_phase2['level_1'])
i_w6_phase3['datetime']=pd.to_datetime(i_w6_phase3['date']+ " " + i_w6_phase3['level_1'])

i_w6_phase2.drop(["date","level_1"],axis=1,inplace=True)
i_w6_phase3.drop(["date","level_1"],axis=1,inplace=True)
i_w6_phase1.drop(["date","level_1"],axis=1,inplace=True)

#w2
i_w2_phase1=i_w2_phase1.rename(columns={0:"w2_phase1"})
i_w2_phase2=i_w2_phase2.rename(columns={0:"w2_phase2"})
i_w2_phase3=i_w2_phase3.rename(columns={0:"w2_phase3"})
i_w2_phase1 = i_w2_phase1.set_index(['datetime'])
i_w2_phase2 = i_w2_phase2.set_index(['datetime'])
i_w2_phase3 = i_w2_phase3.set_index(['datetime'])

#w3
i_w3_phase1=i_w3_phase1.rename(columns={0:"w3_phase1"})
i_w3_phase2=i_w3_phase2.rename(columns={0:"w3_phase2"})
i_w3_phase3=i_w3_phase3.rename(columns={0:"w3_phase3"})

i_w3_phase1 = i_w3_phase1.set_index(['datetime'])
i_w3_phase2 = i_w3_phase2.set_index(['datetime'])
i_w3_phase3 = i_w3_phase3.set_index(['datetime'])

#w4

i_w4_phase1=i_w4_phase1.rename(columns={0:"w4_phase1"})
i_w4_phase2=i_w4_phase2.rename(columns={0:"w4_phase2"})
i_w4_phase3=i_w4_phase3.rename(columns={0:"w4_phase3"})
i_w4_phase1 = i_w4_phase1.set_index(['datetime'])
i_w4_phase2 = i_w4_phase2.set_index(['datetime'])
i_w4_phase3 = i_w4_phase3.set_index(['datetime'])

#w5
i_w5_phase1=i_w5_phase1.rename(columns={0:"w5_phase1"})
i_w5_phase2=i_w5_phase2.rename(columns={0:"w5_phase2"})
i_w5_phase3=i_w5_phase3.rename(columns={0:"w5_phase3"})

i_w5_phase1 = i_w5_phase1.set_index(['datetime'])
i_w5_phase2 = i_w5_phase2.set_index(['datetime'])
i_w5_phase3 = i_w5_phase3.set_index(['datetime'])

#w6
i_w6_phase1=i_w6_phase1.rename(columns={0:"w6_phase1"})
i_w6_phase2=i_w6_phase2.rename(columns={0:"w6_phase2"})
i_w6_phase3=i_w6_phase3.rename(columns={0:"w6_phase3"})
i_w6_phase1 = i_w6_phase1.set_index(['datetime'])
i_w6_phase2 = i_w6_phase2.set_index(['datetime'])
i_w6_phase3 = i_w6_phase3.set_index(['datetime'])

"""Dropping duplicate values, by keeping the last of them, as we have seen that an extra value (0) has been inserted at sereral entries, probably by stacking, prior to the actual value"""

i_w4_phase1[i_w4_phase1.duplicated()==True]
i_w4_phase1["2022-10-20 00:00:00	"]

#w2
i_w2_phase1 = i_w2_phase1.loc[~i_w2_phase1.index.duplicated(keep='last')]
i_w2_phase2 = i_w2_phase2.loc[~i_w2_phase2.index.duplicated(keep='last')]
i_w2_phase3 = i_w2_phase3.loc[~i_w2_phase3.index.duplicated(keep='last')]

#w3
i_w3_phase1 = i_w3_phase1.loc[~i_w3_phase1.index.duplicated(keep='last')]
i_w3_phase2 = i_w3_phase2.loc[~i_w3_phase2.index.duplicated(keep='last')]
i_w3_phase3 = i_w3_phase3.loc[~i_w3_phase3.index.duplicated(keep='last')]

#w4
i_w4_phase1 = i_w4_phase1.loc[~i_w4_phase1.index.duplicated(keep='last')]
i_w4_phase2 = i_w4_phase2.loc[~i_w4_phase2.index.duplicated(keep='last')]
i_w4_phase3 = i_w4_phase3.loc[~i_w4_phase3.index.duplicated(keep='last')]

#w5
i_w5_phase1 = i_w5_phase1.loc[~i_w5_phase1.index.duplicated(keep='last')]
i_w5_phase2 = i_w5_phase2.loc[~i_w5_phase2.index.duplicated(keep='last')]
i_w5_phase3 = i_w5_phase3.loc[~i_w5_phase3.index.duplicated(keep='last')]

#w6
i_w6_phase1 = i_w6_phase1.loc[~i_w6_phase1.index.duplicated(keep='last')]
i_w6_phase2 = i_w6_phase2.loc[~i_w6_phase2.index.duplicated(keep='last')]
i_w6_phase3 = i_w6_phase3.loc[~i_w6_phase3.index.duplicated(keep='last')]

#w2
i_w2_phase1 = fill_missing_dates(i_w2_phase1)
i_w2_phase2 = fill_missing_dates(i_w2_phase2)
i_w2_phase3 = fill_missing_dates(i_w2_phase3)

#w3
i_w3_phase1 = fill_missing_dates(i_w3_phase1)
i_w3_phase2 = fill_missing_dates(i_w3_phase2)
i_w3_phase3 = fill_missing_dates(i_w3_phase3)

#w4
i_w4_phase1 = fill_missing_dates(i_w4_phase1)
i_w4_phase2 = fill_missing_dates(i_w4_phase2)
i_w4_phase3 = fill_missing_dates(i_w4_phase3)

#w5
i_w5_phase1 = fill_missing_dates(i_w5_phase1)
i_w5_phase2 = fill_missing_dates(i_w5_phase2)
i_w5_phase3 = fill_missing_dates(i_w5_phase3)

#w6
i_w6_phase1 = fill_missing_dates(i_w6_phase1)
i_w6_phase2 = fill_missing_dates(i_w6_phase2)
i_w6_phase3 = fill_missing_dates(i_w6_phase3)

"""Concatenating each phase (1,2,3) for every smart meter into one i_meter df.:"""

#w2
i_w2 = pd.concat([i_w2_phase1, i_w2_phase2], axis=1, join="inner")
i_w2 = pd.concat([i_w2, i_w2_phase3], axis=1, join="inner")

#w3
i_w3 = pd.concat([i_w3_phase1, i_w3_phase2], axis=1, join="inner")
i_w3 = pd.concat([i_w3, i_w3_phase3], axis=1, join="inner")

#w4
i_w4 = pd.concat([i_w4_phase1, i_w4_phase2], axis=1, join="inner")
i_w4 = pd.concat([i_w4, i_w4_phase3], axis=1, join="inner")

#w5
i_w5 = pd.concat([i_w5_phase1, i_w5_phase2], axis=1, join="inner")
i_w5 = pd.concat([i_w5, i_w5_phase3], axis=1, join="inner")

#w6
i_w6 = pd.concat([i_w6_phase1, i_w6_phase2], axis=1, join="inner")
i_w6 = pd.concat([i_w6, i_w6_phase3], axis=1, join="inner")

"""Concatening all diferrent meter's power dfs to one current df, which will display every current phase for every smart meter"""

current = pd.concat([i_w2, i_w3], axis=1, join="inner")
current = pd.concat([i_w4, current], axis=1, join="inner")
current = pd.concat([i_w5, current], axis=1, join="inner")
current = pd.concat([i_w6, current], axis=1, join="inner")

current.to_csv("current_total.csv")

"""###Lastly, we will deal with voltage Data

Splitting each phase of voltage (1,2,3) into different dfs for every meter W2-W6
"""

#W2
v_w2=voltage_df[voltage_df['id']=='W2']
v_w2_phase1 = v_w2[v_w2["voltage_type"]=='u1']
v_w2_phase2 = v_w2[v_w2["voltage_type"]=="u2"]
v_w2_phase3 =v_w2[v_w2["voltage_type"]=="u3"]

#W3
v_w3=voltage_df[voltage_df['id']=='W3']
v_w3_phase1 = v_w3[v_w3["voltage_type"]=='u1']
v_w3_phase2 = v_w3[v_w3["voltage_type"]=="u2"]
v_w3_phase3 =v_w3[v_w3["voltage_type"]=="u3"]

#W4
v_w4=voltage_df[voltage_df['id']=='W4']
v_w4_phase1 = v_w4[v_w4["voltage_type"]=='u1']
v_w4_phase2 = v_w4[v_w4["voltage_type"]=="u2"]
v_w4_phase3 =v_w4[v_w4["voltage_type"]=="u3"]

#W5
v_w5=voltage_df[voltage_df['id']=='W5']
v_w5_phase1 = v_w5[v_w5["voltage_type"]=='u1']
v_w5_phase2 = v_w5[v_w5["voltage_type"]=="u2"]
v_w5_phase3 =v_w5[v_w5["voltage_type"]=="u3"]

#W6
v_w6=voltage_df[voltage_df['id']=='W6']
v_w6_phase1 = v_w6[v_w6["voltage_type"]=='u1']
v_w6_phase2 = v_w6[v_w6["voltage_type"]=="u2"]
v_w6_phase3 =v_w6[v_w6["voltage_type"]=="u3"]

"""Dropping the uncnecessary columns for every meter's df (Unnamed: 0, Unnamed, 2, id, voltage_type) as by splitting the initial df into different dfs for each meter and for each phase, we have already this information."""

#w2
v_w2_phase1.drop(v_w2_phase1.filter(regex="Unname"),axis=1, inplace=True)
v_w2_phase2.drop(v_w2_phase2.filter(regex="Unname"),axis=1, inplace=True)
v_w2_phase3.drop(v_w2_phase3.filter(regex="Unname"),axis=1, inplace=True)

v_w2_phase1.drop(["id","voltage_type","_id"], axis=1,inplace=True)
v_w2_phase2.drop(["id","voltage_type","_id"], axis=1,inplace=True)
v_w2_phase3.drop(["id","voltage_type","_id"], axis=1,inplace=True)

#w3
v_w3_phase1.drop(v_w3_phase1.filter(regex="Unname"),axis=1, inplace=True)
v_w3_phase2.drop(v_w3_phase2.filter(regex="Unname"),axis=1, inplace=True)
v_w3_phase3.drop(v_w3_phase3.filter(regex="Unname"),axis=1, inplace=True)

v_w3_phase1.drop(["id","voltage_type","_id"], axis=1,inplace=True)
v_w3_phase2.drop(["id","voltage_type","_id"], axis=1,inplace=True)
v_w3_phase3.drop(["id","voltage_type","_id"], axis=1,inplace=True)


#w4
v_w4_phase1.drop(v_w4_phase1.filter(regex="Unname"),axis=1, inplace=True)
v_w4_phase2.drop(v_w4_phase2.filter(regex="Unname"),axis=1, inplace=True)
v_w4_phase3.drop(v_w4_phase3.filter(regex="Unname"),axis=1, inplace=True)

v_w4_phase1.drop(["id","voltage_type","_id"], axis=1,inplace=True)
v_w4_phase2.drop(["id","voltage_type","_id"], axis=1,inplace=True)
v_w4_phase3.drop(["id","voltage_type","_id"], axis=1,inplace=True)

#w5
v_w5_phase1.drop(v_w5_phase1.filter(regex="Unname"),axis=1, inplace=True)
v_w5_phase2.drop(v_w5_phase2.filter(regex="Unname"),axis=1, inplace=True)
v_w5_phase3.drop(v_w5_phase3.filter(regex="Unname"),axis=1, inplace=True)

v_w5_phase1.drop(["id","voltage_type","_id"], axis=1,inplace=True)
v_w5_phase2.drop(["id","voltage_type","_id"], axis=1,inplace=True)
v_w5_phase3.drop(["id","voltage_type","_id"], axis=1,inplace=True)


#w6
v_w6_phase1.drop(v_w6_phase1.filter(regex="Unname"),axis=1, inplace=True)
v_w6_phase2.drop(v_w6_phase2.filter(regex="Unname"),axis=1, inplace=True)
v_w6_phase3.drop(v_w6_phase3.filter(regex="Unname"),axis=1, inplace=True)

v_w6_phase1.drop(["id","voltage_type","_id"], axis=1,inplace=True)
v_w6_phase2.drop(["id","voltage_type","_id"], axis=1,inplace=True)
v_w6_phase3.drop(["id","voltage_type","_id"], axis=1,inplace=True)

"""Setting "date" column as index in order to apply the .stack function. By using .stack, we stack level 1 from columns to index. With the parameter "dropna = False " we keep the Nan values."""

#w2
v_w2_phase1 = v_w2_phase1.set_index("date")
v_w2_phase2 = v_w2_phase2.set_index("date")
v_w2_phase3 = v_w2_phase3.set_index("date")

v_w2_phase1 = v_w2_phase1.stack(dropna=False)
v_w2_phase2 = v_w2_phase2.stack(dropna=False)
v_w2_phase3 = v_w2_phase3.stack(dropna=False)

#w3
v_w3_phase1 = v_w3_phase1.set_index("date")
v_w3_phase2 = v_w3_phase2.set_index("date")
v_w3_phase3 = v_w3_phase3.set_index("date")

v_w3_phase1 = v_w3_phase1.stack(dropna=False)
v_w3_phase2 = v_w3_phase2.stack(dropna=False)
v_w3_phase3 = v_w3_phase3.stack(dropna=False)

#w4
v_w4_phase1 = v_w4_phase1.set_index("date")
v_w4_phase2 = v_w4_phase2.set_index("date")
v_w4_phase3 = v_w4_phase3.set_index("date")

v_w4_phase1 = v_w4_phase1.stack(dropna=False)
v_w4_phase2 = v_w4_phase2.stack(dropna=False)
v_w4_phase3 = v_w4_phase3.stack(dropna=False)

#w5
v_w5_phase1 = v_w5_phase1.set_index("date")
v_w5_phase2 = v_w5_phase2.set_index("date")
v_w5_phase3 = v_w5_phase3.set_index("date")

v_w5_phase1 = v_w5_phase1.stack(dropna=False)
v_w5_phase2 = v_w5_phase2.stack(dropna=False)
v_w5_phase3 = v_w5_phase3.stack(dropna=False)

#w6
v_w6_phase1 = v_w6_phase1.set_index("date")
v_w6_phase2 = v_w6_phase2.set_index("date")
v_w6_phase3 = v_w6_phase3.set_index("date")

v_w6_phase1 = v_w6_phase1.stack(dropna=False)
v_w6_phase2 = v_w6_phase2.stack(dropna=False)
v_w6_phase3 = v_w6_phase3.stack(dropna=False)

"""Converting the resulted series type to df again and reseting the index"""

#w2
v_w2_phase1 = v_w2_phase1.to_frame()
v_w2_phase2 = v_w2_phase2.to_frame()
v_w2_phase3 = v_w2_phase3.to_frame()

v_w2_phase1 = v_w2_phase1.reset_index()
v_w2_phase2 = v_w2_phase2.reset_index()
v_w2_phase3 = v_w2_phase3.reset_index()

#w3
v_w3_phase1 = v_w3_phase1.to_frame()
v_w3_phase2 = v_w3_phase2.to_frame()
v_w3_phase3 = v_w3_phase3.to_frame()

v_w3_phase1 = v_w3_phase1.reset_index()
v_w3_phase2 = v_w3_phase2.reset_index()
v_w3_phase3 = v_w3_phase3.reset_index()


#w4
v_w4_phase1 = v_w4_phase1.to_frame()
v_w4_phase2 = v_w4_phase2.to_frame()
v_w4_phase3 = v_w4_phase3.to_frame()

v_w4_phase1 = v_w4_phase1.reset_index()
v_w4_phase2 = v_w4_phase2.reset_index()
v_w4_phase3 = v_w4_phase3.reset_index()

#w5
v_w5_phase1 = v_w5_phase1.to_frame()
v_w5_phase2 = v_w5_phase2.to_frame()
v_w5_phase3 = v_w5_phase3.to_frame()

v_w5_phase1 = v_w5_phase1.reset_index()
v_w5_phase2 = v_w5_phase2.reset_index()
v_w5_phase3 = v_w5_phase3.reset_index()


#w6

v_w6_phase1 = v_w6_phase1.to_frame()
v_w6_phase2 = v_w6_phase2.to_frame()
v_w6_phase3 = v_w6_phase3.to_frame()

v_w6_phase1 = v_w6_phase1.reset_index()
v_w6_phase2 = v_w6_phase2.reset_index()
v_w6_phase3 = v_w6_phase3.reset_index()

"""Combining date & time into datetime column and setting this as index."""

#w2
v_w2_phase1['datetime']=pd.to_datetime(v_w2_phase1['date']+ " " + v_w2_phase1['level_1'])
v_w2_phase2['datetime']=pd.to_datetime(v_w2_phase2['date']+ " " + v_w2_phase2['level_1'])
v_w2_phase3['datetime']=pd.to_datetime(v_w2_phase3['date']+ " " + v_w2_phase3['level_1'])

v_w2_phase2.drop(["date","level_1"],axis=1,inplace=True)
v_w2_phase3.drop(["date","level_1"],axis=1,inplace=True)
v_w2_phase1.drop(["date","level_1"],axis=1,inplace=True)

#w3
v_w3_phase1['datetime']=pd.to_datetime(v_w3_phase1['date']+ " " + v_w3_phase1['level_1'])
v_w3_phase2['datetime']=pd.to_datetime(v_w3_phase2['date']+ " " + v_w3_phase2['level_1'])
v_w3_phase3['datetime']=pd.to_datetime(v_w3_phase3['date']+ " " + v_w3_phase3['level_1'])

v_w3_phase2.drop(["date","level_1"],axis=1,inplace=True)
v_w3_phase3.drop(["date","level_1"],axis=1,inplace=True)
v_w3_phase1.drop(["date","level_1"],axis=1,inplace=True)
#w4
v_w4_phase1['datetime']=pd.to_datetime(v_w4_phase1['date']+ " " + v_w4_phase1['level_1'])
v_w4_phase2['datetime']=pd.to_datetime(v_w4_phase2['date']+ " " + v_w4_phase2['level_1'])
v_w4_phase3['datetime']=pd.to_datetime(v_w4_phase3['date']+ " " + v_w4_phase3['level_1'])

v_w4_phase2.drop(["date","level_1"],axis=1,inplace=True)
v_w4_phase3.drop(["date","level_1"],axis=1,inplace=True)
v_w4_phase1.drop(["date","level_1"],axis=1,inplace=True)

#w5
v_w5_phase1['datetime']=pd.to_datetime(v_w5_phase1['date']+ " " + v_w5_phase1['level_1'])
v_w5_phase2['datetime']=pd.to_datetime(v_w5_phase2['date']+ " " + v_w5_phase2['level_1'])
v_w5_phase3['datetime']=pd.to_datetime(v_w5_phase3['date']+ " " + v_w5_phase3['level_1'])

v_w5_phase2.drop(["date","level_1"],axis=1,inplace=True)
v_w5_phase3.drop(["date","level_1"],axis=1,inplace=True)
v_w5_phase1.drop(["date","level_1"],axis=1,inplace=True)

#w6
v_w6_phase1['datetime']=pd.to_datetime(v_w6_phase1['date']+ " " + v_w6_phase1['level_1'])
v_w6_phase2['datetime']=pd.to_datetime(v_w6_phase2['date']+ " " + v_w6_phase2['level_1'])
v_w6_phase3['datetime']=pd.to_datetime(v_w6_phase3['date']+ " " + v_w6_phase3['level_1'])

v_w6_phase2.drop(["date","level_1"],axis=1,inplace=True)
v_w6_phase3.drop(["date","level_1"],axis=1,inplace=True)
v_w6_phase1.drop(["date","level_1"],axis=1,inplace=True)

#w2
v_w2_phase1=v_w2_phase1.rename(columns={0:"w2_u1"})
v_w2_phase2=v_w2_phase2.rename(columns={0:"w2_u2"})
v_w2_phase3=v_w2_phase3.rename(columns={0:"w2_u3"})
v_w2_phase1 = v_w2_phase1.set_index(['datetime'])
v_w2_phase2 = v_w2_phase2.set_index(['datetime'])
v_w2_phase3 = v_w2_phase3.set_index(['datetime'])

#w3
v_w3_phase1=v_w3_phase1.rename(columns={0:"w3_u1"})
v_w3_phase2=v_w3_phase2.rename(columns={0:"w3_u2"})
v_w3_phase3=v_w3_phase3.rename(columns={0:"w3_u3"})
v_w3_phase1 = v_w3_phase1.set_index(['datetime'])
v_w3_phase2 = v_w3_phase2.set_index(['datetime'])
v_w3_phase3 = v_w3_phase3.set_index(['datetime'])


#w4

v_w4_phase1=v_w4_phase1.rename(columns={0:"w4_u1"})
v_w4_phase2=v_w4_phase2.rename(columns={0:"w4_u2"})
v_w4_phase3=v_w4_phase3.rename(columns={0:"w4_u3"})
v_w4_phase1 = v_w4_phase1.set_index(['datetime'])
v_w4_phase2 = v_w4_phase2.set_index(['datetime'])
v_w4_phase3 = v_w4_phase3.set_index(['datetime'])

#w5
v_w5_phase1=v_w5_phase1.rename(columns={0:"w5_u1"})
v_w5_phase2=v_w5_phase2.rename(columns={0:"w5_u2"})
v_w5_phase3=v_w5_phase3.rename(columns={0:"w5_u3"})
v_w5_phase1 = v_w5_phase1.set_index(['datetime'])
v_w5_phase2 = v_w5_phase2.set_index(['datetime'])
v_w5_phase3 = v_w5_phase3.set_index(['datetime'])

#w6
v_w6_phase1=v_w6_phase1.rename(columns={0:"w6_u1"})
v_w6_phase2=v_w6_phase2.rename(columns={0:"w6_u2"})
v_w6_phase3=v_w6_phase3.rename(columns={0:"w6_u3"})

v_w6_phase1 = v_w6_phase1.set_index(['datetime'])
v_w6_phase2 = v_w6_phase2.set_index(['datetime'])
v_w6_phase3 = v_w6_phase3.set_index(['datetime'])

"""Dropping duplicate values, by keeping the last of them, as we have seen that an extra value (0) has been inserted at sereral entries, probably by stacking, prior to the actual value"""

v_w2_phase1[v_w2_phase1.duplicated()==True]
v_w2_phase1["2021-08-13 00:00:00"]

#w2
v_w2_phase1 = v_w2_phase1.loc[~v_w2_phase1.index.duplicated(keep='last')]
v_w2_phase2 = v_w2_phase2.loc[~v_w2_phase2.index.duplicated(keep='last')]
v_w2_phase3 = v_w2_phase3.loc[~v_w2_phase3.index.duplicated(keep='last')]

#w3
v_w3_phase1 = v_w3_phase1.loc[~v_w3_phase1.index.duplicated(keep='last')]
v_w3_phase2 = v_w3_phase2.loc[~v_w3_phase2.index.duplicated(keep='last')]
v_w3_phase3 = v_w3_phase3.loc[~v_w3_phase3.index.duplicated(keep='last')]

#w4
v_w4_phase1 = v_w4_phase1.loc[~v_w4_phase1.index.duplicated(keep='last')]
v_w4_phase2 = v_w4_phase2.loc[~v_w4_phase2.index.duplicated(keep='last')]
v_w4_phase3 = v_w4_phase3.loc[~v_w4_phase3.index.duplicated(keep='last')]

#w5
v_w5_phase1 = v_w5_phase1.loc[~v_w5_phase1.index.duplicated(keep='last')]
v_w5_phase2 = v_w5_phase2.loc[~v_w5_phase2.index.duplicated(keep='last')]
v_w5_phase3 = v_w5_phase3.loc[~v_w5_phase3.index.duplicated(keep='last')]

#w6
v_w6_phase1 = v_w6_phase1.loc[~v_w6_phase1.index.duplicated(keep='last')]
v_w6_phase2 = v_w6_phase2.loc[~v_w6_phase2.index.duplicated(keep='last')]
v_w6_phase3 = v_w6_phase3.loc[~v_w6_phase3.index.duplicated(keep='last')]

#w2
v_w2_phase1 = fill_missing_dates(v_w2_phase1)
v_w2_phase2 = fill_missing_dates(v_w2_phase2)
v_w2_phase3 = fill_missing_dates(v_w2_phase3)
#w3
v_w3_phase1 = fill_missing_dates(v_w3_phase1)
v_w3_phase2 = fill_missing_dates(v_w3_phase2)
v_w3_phase3 = fill_missing_dates(v_w3_phase3)

#w4
v_w4_phase1 = fill_missing_dates(v_w4_phase1)
v_w4_phase2 = fill_missing_dates(v_w4_phase2)
v_w4_phase3 = fill_missing_dates(v_w4_phase3)

#w5
v_w5_phase1 = fill_missing_dates(v_w5_phase1)
v_w5_phase2 = fill_missing_dates(v_w5_phase2)
v_w5_phase3 = fill_missing_dates(v_w5_phase3)

#w6
v_w6_phase1 = fill_missing_dates(v_w6_phase1)
v_w6_phase2 = fill_missing_dates(v_w6_phase2)
v_w6_phase3 = fill_missing_dates(v_w6_phase3)

"""Concatenating each phase (1,2,3) for every smart meter into one i_meter df.:"""

#w2
v_w2 = pd.concat([v_w2_phase1, v_w2_phase2], axis=1, join="inner")
v_w2 = pd.concat([v_w2, v_w2_phase3], axis=1, join="inner")

#w3
v_w3 = pd.concat([v_w3_phase1, v_w3_phase2], axis=1, join="inner")
v_w3 = pd.concat([v_w3, v_w3_phase3], axis=1, join="inner")

#w4
v_w4 = pd.concat([v_w4_phase1, v_w4_phase2], axis=1, join="inner")
v_w4 = pd.concat([v_w4, v_w4_phase3], axis=1, join="inner")

#w5
v_w5 = pd.concat([v_w5_phase1, v_w5_phase2], axis=1, join="inner")
v_w5 = pd.concat([v_w5, v_w5_phase3], axis=1, join="inner")

#w6
v_w6 = pd.concat([v_w6_phase1, v_w6_phase2], axis=1, join="inner")
v_w6 = pd.concat([v_w6, v_w6_phase3], axis=1, join="inner")

"""Concatening all diferrent meter's power dfs to one voltage df, which will display every current phase for every smart meter and saving it into one csv file, named "voltage_total.csv"
"""

voltage = pd.concat([v_w2, v_w3], axis=1, join="inner")
voltage = pd.concat([v_w4, voltage], axis=1, join="inner")
voltage = pd.concat([v_w5, voltage], axis=1, join="inner")
voltage = pd.concat([v_w6, voltage], axis=1, join="inner")

voltage.to_csv("voltage_total.csv")

"""##Now we will make a new df for every meter's current, power, voltage df that will also include four extra columns. One for the hour of the day, one for the day of the month and one for its name, and one for the year the measure was taken"""

from datetime import date
import calendar

power_w2

#w2
power_w2=power[["active_w2","reactive_w2"]].reset_index()
power_w2["weekday"] =pd.DatetimeIndex(power_w2['index']).day_name()
power_w2=power_w2.set_index("index")
power_w2['day_of_month']=power_w2.index.day 
power_w2['month']=power_w2.index.month
power_w2['hour_of_day']=power_w2.index.hour
power_w2['year']=power_w2.index.year


#w3
power_w3=power[["active_w3","reactive_w3"]].reset_index()
power_w3["weekday"] =pd.DatetimeIndex(power_w3['index']).day_name()
power_w3=power_w3.set_index("index")
power_w3['day_of_month']=power_w3.index.day
power_w3['month']=power_w3.index.month
power_w3['hour_of_day']=power_w3.index.hour
power_w3['year']=power_w3.index.year

#w4
power_w4 =power[["active_w4","reactive_w4"]].reset_index()
power_w4["weekday"] =pd.DatetimeIndex(power_w4['index']).day_name()
power_w4=power_w4.set_index("index")
power_w4['day_of_month']=power_w4.index.day
power_w4['month']=power_w4.index.month
power_w4['hour_of_day']=power_w4.index.hour
power_w4['year']=power_w4.index.year

#w5
power_w5 =power[["active_w5","reactive_w5"]].reset_index()
power_w5["weekday"] =pd.DatetimeIndex(power_w5['index']).day_name()
power_w5=power_w5.set_index("index")
power_w5['day_of_month']=power_w5.index.day
power_w5['month']=power_w5.index.month
power_w5['hour_of_day']=power_w5.index.hour
power_w5['year']=power_w5.index.year



#w6
power_w6=power[["active_w6","reactive_w6"]].reset_index()
power_w6["weekday"] =pd.DatetimeIndex(power_w6['index']).day_name()
power_w6=power_w6.set_index("index")
power_w6['day_of_month']=power_w6.index.day
power_w6['month']=power_w6.index.month
power_w6['hour_of_day']=power_w6.index.hour
power_w6['year']=power_w6.index.year

### Current
#w2
i__w2 =current[['w2_phase1',	'w2_phase2'	,'w2_phase3']].reset_index()
i__w2["weekday"] =pd.DatetimeIndex(i__w2['index']).day_name()
i__w2=i__w2.set_index("index")
i__w2['day_of_month']=i__w2.index.day
i__w2['month']=i__w2.index.month
i__w2['hour_of_day']=i__w2.index.hour
i__w2['year']=i__w2.index.year



#w3
i__w3 =current[['w3_phase1',	'w3_phase2'	,'w3_phase3']].reset_index()
i__w3["weekday"] =pd.DatetimeIndex(i__w3['index']).day_name()
i__w3=i__w3.set_index("index")
i__w3['day_of_month']=i__w3.index.day
i__w3['month']=i__w3.index.month
i__w3['hour_of_day']=i__w3.index.hour
i__w3['year']=i__w3.index.year


#w4
i__w4 =current[['w4_phase1',	'w4_phase2'	,'w4_phase3']].reset_index()
i__w4["weekday"] =pd.DatetimeIndex(i__w4['index']).day_name()
i__w4=i__w4.set_index("index")
i__w4['day_of_month']=i__w4.index.day
i__w4['month']=i__w4.index.month
i__w4['hour_of_day']=i__w4.index.hour
i__w4['year']=i__w4.index.year


#w5
i__w5 =current[['w5_phase1',	'w5_phase2'	,'w5_phase3']].reset_index()
i__w5["weekday"] =pd.DatetimeIndex(i__w5['index']).day_name()
i__w5=i__w5.set_index("index")
i__w5['day_of_month']=i__w5.index.day
i__w5['month']=i__w5.index.month
i__w5['hour_of_day']=i__w5.index.hour
i__w5['year']=i__w5.index.year


#w6
i__w6 =current[['w6_phase1',	'w6_phase2'	,'w6_phase3']].reset_index()
i__w6["weekday"] =pd.DatetimeIndex(i__w6['index']).day_name()
i__w6=i__w6.set_index("index")
i__w6['day_of_month']=i__w6.index.day
i__w6['month']=i__w6.index.month
i__w6['hour_of_day']=i__w6.index.hour
i__w6['year']=i__w6.index.year

##Voltage
#w2
v__w2 =voltage[['w2_u1','w2_u2','w2_u3']].reset_index()
v__w2["weekday"] =pd.DatetimeIndex(v__w2['index']).day_name()
v__w2=v__w2.set_index("index")
v__w2['day_of_month']=v__w2.index.day
v__w2['month']=v__w2.index.month
v__w2['hour_of_day']=v__w2.index.hour
v__w2['year']=v__w2.index.year


#w3
v__w3 =voltage[['w3_u1','w3_u2','w3_u3']].reset_index()
v__w3["weekday"]=pd.DatetimeIndex(v__w3['index']).day_name()
v__w3=v__w3.set_index('index')
v__w3['day_of_month']=v__w3.index.day
v__w3['month']=v__w3.index.month
v__w3['hour_of_day']=v__w3.index.hour
v__w3['year']=v__w3.index.year



#w4
v__w4 =voltage[['w4_u1',"w4_u2","w4_u3"]].reset_index()
v__w4["weekday"] =pd.DatetimeIndex(v__w4['index']).day_name()
v__w4=v__w4.set_index("index")
v__w4['day_of_month']=v__w4.index.day
v__w4['month']=v__w4.index.month
v__w4['hour_of_day']=v__w4.index.hour
v__w4['year']=v__w4.index.year


#w5
v__w5 =voltage[['w5_u1',"w5_u2","w5_u3"]].reset_index()
v__w5["weekday"] =pd.DatetimeIndex(v__w5['index']).day_name()
v__w5=v__w5.set_index("index")
v__w5['day_of_month']=v__w5.index.day
v__w5['month']=v__w5.index.month
v__w5['hour_of_day']=v__w5.index.hour
v__w5['year']=v__w5.index.year


#w6
v__w6 =voltage[['w6_u1',"w6_u2","w6_u3"]].reset_index()
v__w6["day"] =pd.DatetimeIndex(v__w6['index']).day_name()
v__w6=v__w6.set_index("index")
v__w6['day_of_month']=v__w6.index.day
v__w6['month']=v__w6.index.month
v__w6['hour_of_day']=v__w6.index.hour
v__w6['year']=v__w6.index.year

"""Concatenaning each meter's df to one in order to make separate dfs for current, power and voltage with the additional columns

"""

## Current
current_dt = current.reset_index()
current_dt["weekday"] =pd.DatetimeIndex(current_dt['index']).day_name()
current_dt=current_dt.set_index("index")
current_dt['day_of_month']=current_dt.index.day
current_dt['month']=current_dt.index.month
current_dt['hour_of_day']=current_dt.index.hour
current_dt['year']=current_dt.index.year



current_dt.to_csv("current_dt.csv")

##Voltage
voltage_dt = voltage.reset_index()
voltage_dt["weekday"] =pd.DatetimeIndex(voltage_dt['index']).day_name()
voltage_dt=voltage_dt.set_index("index")
voltage_dt['day_of_month']=voltage_dt.index.day
voltage_dt['month']=voltage_dt.index.month
voltage_dt['hour_of_day']=voltage_dt.index.hour
voltage_dt['year']=voltage_dt.index.year


voltage_dt.to_csv("voltage_dt.csv")

#Power
power_dt = power.reset_index()
power_dt["weekday"] =pd.DatetimeIndex(power_dt['index']).day_name()
power_dt=power_dt.set_index("index")
power_dt['day_of_month']=power_dt.index.day
power_dt['month']=power_dt.index.month
power_dt['hour_of_day']=power_dt.index.hour
power_dt['year']=power_dt.index.year


power_dt.to_csv("power_dt.csv")